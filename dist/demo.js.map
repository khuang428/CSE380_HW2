{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/animated_sprite_demo/AnimatedSpriteDemo.ts","src/wolfie2d/Game.ts","src/wolfie2d/files/ResourceManager.ts","src/wolfie2d/loop/GameLoopTemplate.ts","src/wolfie2d/math/MathUtilities.ts","src/wolfie2d/math/Matrix.ts","src/wolfie2d/math/Vector3.ts","src/wolfie2d/rendering/TextRenderer.ts","src/wolfie2d/rendering/WebGLGameCircleRenderer.ts","src/wolfie2d/rendering/WebGLGameRenderingSystem.ts","src/wolfie2d/rendering/WebGLGameShader.ts","src/wolfie2d/rendering/WebGLGameSpriteRenderer.ts","src/wolfie2d/rendering/WebGLGameTexture.ts","src/wolfie2d/scene/SceneGraph.ts","src/wolfie2d/scene/SceneObject.ts","src/wolfie2d/scene/sprite/AnimatedSprite.ts","src/wolfie2d/scene/sprite/AnimatedSpriteType.ts","src/wolfie2d/scene/sprite/GradientCircle.ts","src/wolfie2d/ui/UIController.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n * AnimatedSpriteDemo.ts - demonstrates some simple sprite rendering and \n * animation as well as some basic mouse interactions. Note that the\n * AnimationSpriteDemo class loads and creates custom content for the\n * purpose of demonstrating basic functionality.\n */\nimport {Game} from '../wolfie2d/Game'\nimport {ResourceManager} from '../wolfie2d/files/ResourceManager'\nimport {TextToRender} from '../wolfie2d/rendering/TextRenderer'\nimport {WebGLGameRenderingSystem} from '../wolfie2d/rendering/WebGLGameRenderingSystem'\nimport {SceneGraph} from '../wolfie2d/scene/SceneGraph'\nimport {AnimatedSprite} from '../wolfie2d/scene/sprite/AnimatedSprite'\nimport {AnimatedSpriteType} from '../wolfie2d/scene/sprite/AnimatedSpriteType'\nimport { GradientCircle } from '../wolfie2d/scene/sprite/GradientCircle'\n\n// IN THIS EXAMPLE WE'LL HAVE 2 SPRITE TYPES THAT EACH HAVE THE SAME 2 STATES\n// AND WHERE EACH SPRITE TYPE HAS ITS OWN SPRITE SHEET\nconst DEMO_SPRITE_TYPES : string[] = [\n    'resources/animated_sprites/RedCircleMan.json',\n    'resources/animated_sprites/MultiColorBlock.json'\n];\nconst DEMO_SPRITE_STATES = {\n    FORWARD_STATE: 'FORWARD',\n    REVERSE_STATE: 'REVERSE'\n};\nconst DEMO_TEXTURES : string[] = [\n    'resources/images/EightBlocks.png', \n    'resources/images/RedCircleMan.png'\n];\n\nclass AnimatedSpriteDemo {\n    constructor() {}\n\n    /**\n     * This method initializes the application, building all the needed\n     * game objects and setting them up for use.\n     */\n    public buildTestScene(game : Game, callback : Function) {\n        let renderingSystem : WebGLGameRenderingSystem = game.getRenderingSystem();\n        let sceneGraph : SceneGraph = game.getSceneGraph();\n        let resourceManager : ResourceManager = game.getResourceManager();\n        let builder = this;\n \n        // EMPLOY THE RESOURCE MANAGER TO BUILD ALL THE WORLD CONTENT\n        resourceManager.loadTextures(DEMO_TEXTURES, renderingSystem, function() {\n            // ONLY AFTER ALL THE TEXTURES HAVE LOADED LOAD THE SPRITE TYPES\n            resourceManager.loadSpriteTypes(DEMO_SPRITE_TYPES, function() {\n                // ONLY AFTER ALL THE SPRITE TYPES HAVE LOADED LOAD THE SPRITES\n                builder.buildAnimatedSprites(resourceManager, sceneGraph);\n\n                // AND BUILD ALL THE TEXT OUR APP WILL USE\n                builder.buildText(game);\n\n                // EVERYTHING HAS BEEN BUILT, CALL THE CALLBACK\n                callback();\n            });\n        });\n    }\n\n    /*\n     * Builds all the animated sprites to be used by the application and\n     * adds them to the scene.\n     */\n    private buildAnimatedSprites(resourceManager : ResourceManager, scene : SceneGraph) {\n        let canvasWidth : number = (<HTMLCanvasElement>document.getElementById(\"game_canvas\")).width;\n        let canvasHeight : number = (<HTMLCanvasElement>document.getElementById(\"game_canvas\")).height;\n\n        // BUILD A BUNCH OF CIRCLE SPRITES\n        for (let i = 0; i < DEMO_SPRITE_TYPES.length; i++) {\n            for (let j = 0; j < 5; j++) {\n                let spriteTypeToUse : string = DEMO_SPRITE_TYPES[i];\n                let animatedSpriteType : AnimatedSpriteType = resourceManager.getAnimatedSpriteTypeById(spriteTypeToUse);\n                let spriteToAdd : AnimatedSprite = new AnimatedSprite(animatedSpriteType, DEMO_SPRITE_STATES.FORWARD_STATE);\n                let randomX : number = Math.floor(Math.random() * canvasWidth) - (animatedSpriteType.getSpriteWidth()/2);\n                let randomY : number = Math.floor(Math.random() * canvasHeight) - (animatedSpriteType.getSpriteHeight()/2);\n                spriteToAdd.getPosition().set(randomX, randomY, 0.0, 1.0);\n                scene.addAnimatedSprite(spriteToAdd);\n            }\n        }\n        for(let i = 0; i < 5;i++){\n            let circleToAdd : GradientCircle = new GradientCircle();\n            let randomX : number = Math.floor(Math.random() * canvasWidth) - (circleToAdd.getDiameter()/2);\n            let randomY : number = Math.floor(Math.random() * canvasHeight) - (circleToAdd.getDiameter()/2);\n            circleToAdd.getPosition().set(randomX, randomY, 0.0, 1.0);\n            scene.addGradientCircle(circleToAdd);\n        }\n\n    }\n\n    /*\n     * Builds all the text to be displayed in the application.\n     */\n    private buildText(game : Game) {\n        let sceneGraph : SceneGraph = game.getSceneGraph();\n        let numSpritesText = new TextToRender(\"Num Scene Objects\", \"\", 20, 50, function() {\n            numSpritesText.text = \"Number of Scene Objects: \" + (sceneGraph.getNumSprites() + sceneGraph.getNumCircles());\n        });\n\n\n        let spriteInfo = new TextToRender(\"Object Info\", \"\", 20, 100, function() {\n            let obj = game.getSceneGraph().getObjectToShowInfo();\n            if(obj != null){\n                spriteInfo.text = obj.toString();\n            }else{\n                spriteInfo.text = \"\";\n            }\n            \n        });\n\n        let textRenderer = game.getRenderingSystem().getTextRenderer();\n        textRenderer.addTextToRender(numSpritesText);\n        textRenderer.addTextToRender(spriteInfo);\n    }\n}\n\n// THIS IS THE ENTRY POINT INTO OUR APPLICATION, WE MAKE\n// THE Game OBJECT AND INITIALIZE IT WITH THE CANVASES\nlet game = new Game();\ngame.init(\"game_canvas\", \"text_canvas\");\n\n// BUILD THE GAME SCENE\nlet demo = new AnimatedSpriteDemo();\ndemo.buildTestScene(game, function() {\n    // AND START THE GAME LOOP\n    game.start();\n});","/*\n * Game is the focal point of the application, it has 4 subsystems,\n * the resource manager, the scene graph, the rendering system, and\n * the UI controller. In addition it serves as the game loop, providing\n * both an update and draw function that is called on a schedule.\n */\nimport {GameLoopTemplate} from './loop/GameLoopTemplate'\nimport {WebGLGameRenderingSystem} from './rendering/WebGLGameRenderingSystem'\nimport {SceneGraph} from './scene/SceneGraph'\nimport {AnimatedSprite} from './scene/sprite/AnimatedSprite'\nimport {ResourceManager} from './files/ResourceManager'\nimport {UIController} from './ui/UIController'\nimport { TextToRender } from './rendering/TextRenderer'\nimport { SceneObject } from './scene/SceneObject'\nimport { GradientCircle } from './scene/sprite/GradientCircle'\n\n\nexport class Game extends GameLoopTemplate {\n    private resourceManager : ResourceManager = new ResourceManager();\n    private sceneGraph : SceneGraph = new SceneGraph();\n    private renderingSystem : WebGLGameRenderingSystem = new WebGLGameRenderingSystem();\n    private uiController : UIController = new UIController();\n\n    public constructor() {\n        super();\n    }\n\n    public getRenderingSystem() : WebGLGameRenderingSystem {\n        return this.renderingSystem;\n    }\n\n    public getResourceManager() : ResourceManager {\n        return this.resourceManager;\n    }\n\n    public getSceneGraph() : SceneGraph {\n        return this.sceneGraph;\n    }\n\n    public init(gameCanvasId : string, textCanvasId : string) : void {\n        this.renderingSystem.init(gameCanvasId, textCanvasId);\n        this.uiController.init(gameCanvasId, this.sceneGraph);\n    }\n\n    public begin() : void {\n    }\n\n    /*\n     * This draws the game. Note that we are not currently using the \n     * interpolation value, but could once physics is involved.\n     */\n    public draw(interpolationPercentage : number) : void {\n        // GET THE VISIBLE SET FROM THE SCENE GRAPH\n        this.sceneGraph.scope();\n\n        let location = this.sceneGraph.getObjMakeLocation();\n        if(location != null){\n            let rand = Math.random();\n            if(rand < 0.33){\n                let circleToAdd = new GradientCircle();\n                circleToAdd.getPosition().setX(location[0] - circleToAdd.getDiameter()/2);\n                circleToAdd.getPosition().setY(location[1] - circleToAdd.getDiameter()/2);\n                this.sceneGraph.addGradientCircle(circleToAdd);\n                this.sceneGraph.setObjectToShowInfo(circleToAdd);\n            }else if(rand < 0.66){\n                let spriteType = this.resourceManager.getAnimatedSpriteTypeById('resources/animated_sprites/RedCircleMan.json');\n                let spriteToAdd = new AnimatedSprite(spriteType,'FORWARD');\n                spriteToAdd.getPosition().setX(location[0] - (spriteType.getSpriteWidth()/2));\n                spriteToAdd.getPosition().setY(location[1] - (spriteType.getSpriteHeight()/2));\n                this.sceneGraph.addAnimatedSprite(spriteToAdd);\n                this.sceneGraph.setObjectToShowInfo(spriteToAdd);\n            }else{\n                let spriteType = this.resourceManager.getAnimatedSpriteTypeById('resources/animated_sprites/MultiColorBlock.json');\n                let spriteToAdd = new AnimatedSprite(spriteType,'FORWARD');\n                spriteToAdd.getPosition().setX(location[0] - (spriteType.getSpriteWidth()/2));\n                spriteToAdd.getPosition().setY(location[1] - (spriteType.getSpriteHeight()/2));\n                this.sceneGraph.addAnimatedSprite(spriteToAdd);\n                this.sceneGraph.setObjectToShowInfo(spriteToAdd);\n            }\n            this.sceneGraph.setObjMakeLocation(null);\n        }\n\n        // RENDER THE VISIBLE SET, WHICH SHOULD ALL BE RENDERABLE\n        this.renderingSystem.render(this.sceneGraph.getAnimatedSprites(), this.sceneGraph.getGradientCircles());\n        \n    }\n\n    /**\n     * Updates the scene.\n     */\n    public update(delta : number) : void {\n        this.sceneGraph.update(delta);\n    }\n    \n    /**\n     * Updates the FPS counter.\n     */\n    public end(fps : number, panic : boolean) : void {\n        if (panic) {\n            var discardedTime = Math.round(this.resetFrameDelta());\n            console.warn('Main loop panicked, probably because the browser tab was put in the background. Discarding ' + discardedTime + 'ms');\n        }\n    }\n}","/*\n * ResourceManager.js\n *\n * This class is responsible for managing all shared resources. This means things\n * that may be needed by multiple game objects. In this application this means\n * textures for the purpose of GPU rendering and animated sprite types.\n */\nimport {SpriteTypeData, AnimationStateData, AnimationFrameData} from './SpriteTypeData'\nimport {HashTable} from '../data/HashTable'\nimport {WebGLGameRenderingSystem} from '../rendering/WebGLGameRenderingSystem'\nimport {WebGLGameTexture} from '../rendering/WebGLGameTexture'\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\n\nexport class ResourceManager {\n    // GAME TEXTURES \n    private gameTextures : Array<WebGLGameTexture> = new Array();\n    private gameTextureIds : HashTable<number> = {};\n    private numTexturesToLoad : number;\n    private numTexturesLoaded : number;\n\n    // ANIMATED SPRITE TYPES\n    private gameSpriteTypes : Array<AnimatedSpriteType> = new Array();\n    private gameSpriteTypeIds : HashTable<number> = {};\n    private numSpriteTypesToLoad : number;\n    private numSpriteTypesLoaded : number;\n\n    public constructor() {}\n\n    // ACCESSOR METHODS\n\n    public getAnimatedSpriteTypeByIndex(typeIndex : number) : AnimatedSpriteType {\n        return this.gameSpriteTypes[typeIndex];\n    }\n\n    public getAnimatedSpriteTypeById(typeId : string) : AnimatedSpriteType {\n        let typeIndex : number = this.gameSpriteTypeIds[typeId];\n        return this.getAnimatedSpriteTypeByIndex(typeIndex);\n    }\n    \n    // ADDS A NEW SPRITE TYPE \n    public addAnimatedSpriteType(typeId : number, spriteType : AnimatedSpriteType) : void {\n        this.gameSpriteTypes[typeId] = spriteType;\n    }\n\n    /*\n     * Loads all the textures listed in the texturePaths argument and once\n     * that is done it calls the callback function.\n     */\n    public loadTextures(    texturePaths : Array<string>, \n                            renderingSystem : WebGLGameRenderingSystem, \n                            callback : Function) : void {\n        // THEN LOAD THE TEXTURES WE'LL BE USING\n        this.numTexturesToLoad = texturePaths.length;\n        this.numTexturesLoaded = 0;\n        let thisResourceManager = this;\n        let startNumTextures = this.gameTextures.length;\n        for (let i : number = 0; i < this.numTexturesToLoad; i++) {\n            let textureToLoad : WebGLGameTexture = new WebGLGameTexture();\n            let textureId = startNumTextures + i;\n            thisResourceManager.gameTextures[textureId] = textureToLoad;\n            thisResourceManager.gameTextureIds[texturePaths[i]] = textureId;\n            thisResourceManager.loadImage(texturePaths[i], textureId, function(id : number, image : HTMLImageElement) {\n                renderingSystem.initWebGLTexture(textureToLoad, id, image, function() {\n                    thisResourceManager.completeLoadingTexture(callback);\n                });\n            });\n        }\n    }\n\n    /*\n     * Loads all the sprite types listed in the spriteTypePaths argument and once\n     * that is done it calls the callback function.\n     */\n    public loadSpriteTypes(spriteTypePaths : Array<string>, \n                    callback : Function) : void {\n        // THEN LOAD THE TEXTURES WE'LL BE USING\n        this.numSpriteTypesToLoad = spriteTypePaths.length;\n        this.numSpriteTypesLoaded = 0;\n        let thisResourceManager = this;\n        let startNumSpriteTypes = this.gameSpriteTypes.length;\n        for (let i : number = 0; i < this.numSpriteTypesToLoad; i++) {\n            let spriteTypeId = startNumSpriteTypes + i;\n            this.loadSpriteType(spriteTypePaths[i], spriteTypeId, function() {\n                thisResourceManager.completeLoadingSpriteType(callback);\n            });\n        }\n    }\n\n    // PRIVATE HELPER METHODS\n\n    // LOADS A NEW JSON FILE AND UPON COMPLETION CALLS THE callback FUNCTION\n    private loadJsonFile(testFilePath : string, callback : Function) : void {\n        let xobj : XMLHttpRequest = new XMLHttpRequest();\n        xobj.overrideMimeType(\"application/json\");\n        xobj.open('GET', testFilePath, true);\n        xobj.onreadystatechange = function () {\n            if ((xobj.readyState == 4) && (xobj.status == 200)) {\n                callback(xobj.responseText);\n            }\n        };\n        xobj.send(null);\n    }\n\n    // CHECKS TO SEE IF ALL TEXTURE LOADING IS COMPLETE, IF YES, callback IS INVOKED\n    private completeLoadingTexture(callback : Function) : void {\n        this.numTexturesLoaded++;\n        if (this.numTexturesLoaded === this.numTexturesToLoad) {\n            callback();\n        }\n    }\n\n    /**\n     * Loads an Image into RAM and once that process is complete it\n     * calls the callback method argument, presumably to then load\n     * it into GPU memory.\n     */\n    private loadImage(path : string, id : number, callback : Function) : void {\n        // MAKE THE IMAGE\n        var image = new Image();\n\n        // ONCE THE IMAGE LOADING IS COMPLETED, THE CALLBACK WILL GET CALLED\n        image.onload = function () { \n            callback(id, image); \n        }\n\n        // START IMAGE LOADING\n        image.src = path;\n    }\n\n    /*\n     * This function loads a single sprite type resource from a JSON file and upon\n     * completion calls the callback function.\n     */\n    private loadSpriteType(jsonFilePath : string, spriteTypeId : number, callback : Function) : void {\n        let thisResourceManager : ResourceManager = this;\n        this.loadJsonFile(jsonFilePath, function(jsonText : string) {\n            let spriteType : AnimatedSpriteType = thisResourceManager.loadSpriteTypeData(jsonText);\n            thisResourceManager.gameSpriteTypes[spriteTypeId] = spriteType;\n            thisResourceManager.gameSpriteTypeIds[jsonFilePath] = spriteTypeId;\n            callback();\n        });\n    }\n\n    /*\n     * This helper function loads all the json text into an AnimatedSpriteType\n     * object and returns it.\n     */\n    private loadSpriteTypeData = (jsonText : string) : AnimatedSpriteType => {\n        let jsonData : SpriteTypeData = <SpriteTypeData>JSON.parse(jsonText);\n        let texturePath = jsonData.spriteSheetImage;\n        let textureId = this.gameTextureIds[texturePath];\n        let texture : WebGLGameTexture = this.gameTextures[textureId];\n        let spriteWidth : number = jsonData.spriteWidth;\n        let spriteHeight : number = jsonData.spriteHeight;\n        let animatedSpriteType = new AnimatedSpriteType(texture, spriteWidth, spriteHeight);\n        for (let i = 0; i < jsonData.animations.length; i++) {\n            let animation = <AnimationStateData>jsonData.animations[i];\n            animatedSpriteType.addAnimation(animation.name);\n            for (var j = 0; j < animation.frames.length; j++) {\n                var frame = animation.frames[j];\n                animatedSpriteType.addAnimationFrame(animation.name, frame.index, frame.duration);\n            }\n        }\n        return animatedSpriteType;\n    }\n\n    // CHECKS TO SEE IF ALL SPRITE TYPE LOADING IS COMPLETE, IF YES, callback IS INVOKED\n    private completeLoadingSpriteType(callback : Function) : void {\n        this.numSpriteTypesLoaded++;\n        if (this.numSpriteTypesLoaded === this.numSpriteTypesToLoad) {\n            callback();\n        }\n    }    \n}","export abstract class GameLoopTemplate {\n    // ALL INSTANCE VARIABLES WILL BE INITIALIZED VIA THE CONSTRUCTOR\n    private fps: number;\n    private simulationTimestep: number;\n    private frameDelta: number;\n    private lastFrameTimeMs: number;\n    private fpsAlpha: number;\n    private fpsUpdateInterval: number;\n    private lastFpsUpdate: number;\n    private framesSinceLastFpsUpdate: number;\n    private numUpdateSteps: number;\n    private minFrameDelay: number;\n    private running: boolean;\n    private started: boolean;\n    private panic: boolean;\n    private raf: number;\n\n    constructor() {\n        // An exponential moving average of the frames per second.\n        this.fps = 60;\n\n        // The amount of time (in milliseconds) to simulate each time update() runs.\n        // See `MainLoop.setSimulationTimestep()` for details.\n        this.simulationTimestep = 1000 / this.fps;\n\n        // The cumulative amount of in-app time that hasn't been simulated yet.\n        // See the comments inside animate() for details.\n        this.frameDelta = 0;\n\n        // The timestamp in milliseconds of the last time the main loop was run.\n        // Used to compute the time elapsed between frames.\n        this.lastFrameTimeMs = 0;\n\n        // A factor that affects how heavily to weight more recent seconds'\n        // performance when calculating the average frames per second. Valid values\n        // range from zero to one inclusive. Higher values result in weighting more\n        // recent seconds more heavily.\n        this.fpsAlpha = 0.9;\n\n        // The minimum duration between updates to the frames-per-second estimate.\n        // Higher values increase accuracy, but result in slower updates.\n        this.fpsUpdateInterval = 1000;\n\n        // The timestamp (in milliseconds) of the last time the `fps` moving\n        // average was updated.\n        this.lastFpsUpdate = 0;\n\n        // The number of frames delivered since the last time the `fps` moving\n        // average was updated (i.e. since `lastFpsUpdate`).\n        this.framesSinceLastFpsUpdate = 0;\n\n        // The number of times update() is called in a given frame. This is only\n        // relevant inside of animate(), but a reference is held externally so that\n        // this variable is not marked for garbage collection every time the main\n        // loop runs.\n        this.numUpdateSteps = 0;\n\n        // The minimum amount of time in milliseconds that must pass since the last\n        // frame was executed before another frame can be executed. The\n        // multiplicative inverse caps the FPS (the default of zero means there is\n        // no cap).\n        this.minFrameDelay = 0;\n\n        // Whether the main loop is running.\n        this.running = false;\n\n        // `true` if `MainLoop.start()` has been called and the most recent time it\n        // was called has not been followed by a call to `MainLoop.stop()`. This is\n        // different than `running` because there is a delay of a few milliseconds\n        // after `MainLoop.start()` is called before the application is considered\n        // \"running.\" This delay is due to waiting for the next frame.\n        this.started = false;\n\n        // Whether the simulation has fallen too far behind real time.\n        // Specifically, `panic` will be set to `true` if too many updates occur in\n        // one frame. This is only relevant inside of animate(), but a reference is\n        // held externally so that this variable is not marked for garbage\n        // collection every time the main loop runs.\n        this.panic = false;\n    }\n\n    /**\n     * Gets how many milliseconds should be simulated by every run of update().\n     *\n     * See `MainLoop.setSimulationTimestep()` for details on this value.\n     *\n     * @return {Number}\n     *   The number of milliseconds that should be simulated by every run of\n     *   {@link #setUpdate update}().\n     */\n    getSimulationTimestep(): number {\n        return this.simulationTimestep;\n    }\n\n    /**\n     * Sets how many milliseconds should be simulated by every run of update().\n     *\n     * The perceived frames per second (FPS) is effectively capped at the\n     * multiplicative inverse of the simulation timestep. That is, if the\n     * timestep is 1000 / 60 (which is the default), then the maximum perceived\n     * FPS is effectively 60. Decreasing the timestep increases the maximum\n     * perceived FPS at the cost of running {@link #setUpdate update}() more\n     * times per frame at lower frame rates. Since running update() more times\n     * takes more time to process, this can actually slow down the frame rate.\n     * Additionally, if the amount of time it takes to run update() exceeds or\n     * very nearly exceeds the timestep, the application will freeze and crash\n     * in a spiral of death (unless it is rescued; see `MainLoop.setEnd()` for\n     * an explanation of what can be done if a spiral of death is occurring).\n     *\n     * The exception to this is that interpolating between updates for each\n     * render can increase the perceived frame rate and reduce visual\n     * stuttering. See `MainLoop.setDraw()` for an explanation of how to do\n     * this.\n     *\n     * If you are considering decreasing the simulation timestep in order to\n     * raise the maximum perceived FPS, keep in mind that most monitors can't\n     * display more than 60 FPS. Whether humans can tell the difference among\n     * high frame rates depends on the application, but for reference, film is\n     * usually displayed at 24 FPS, other videos at 30 FPS, most games are\n     * acceptable above 30 FPS, and virtual reality might require 75 FPS to\n     * feel natural. Some gaming monitors go up to 144 FPS. Setting the\n     * timestep below 1000 / 144 is discouraged and below 1000 / 240 is\n     * strongly discouraged. The default of 1000 / 60 is good in most cases.\n     *\n     * The simulation timestep should typically only be changed at\n     * deterministic times (e.g. before the main loop starts for the first\n     * time, and not in response to user input or slow frame rates) to avoid\n     * introducing non-deterministic behavior. The update timestep should be\n     * the same for all players/users in multiplayer/multi-user applications.\n     *\n     * See also `MainLoop.getSimulationTimestep()`.\n     *\n     * @param {Number} timestep\n     *   The number of milliseconds that should be simulated by every run of\n     *   {@link #setUpdate update}().\n     */\n    setSimulationTimestep(timestep: number): void {\n        this.simulationTimestep = timestep;\n    }\n\n    /**\n     * Returns the exponential moving average of the frames per second.\n     *\n     * @return {Number}\n     *   The exponential moving average of the frames per second.\n     */\n    getFPS(): number {\n        return this.fps;\n    }\n\n    /**\n     * Gets the maximum frame rate.\n     *\n     * Other factors also limit the FPS; see `MainLoop.setSimulationTimestep`\n     * for details.\n     *\n     * See also `MainLoop.setMaxAllowedFPS()`.\n     *\n     * @return {Number}\n     *   The maximum number of frames per second allowed.\n     */\n    getMaxAllowedFPS(): number {\n        return 1000 / this.minFrameDelay;\n    }\n\n    /**\n     * Sets a maximum frame rate.\n     *\n     * See also `MainLoop.getMaxAllowedFPS()`.\n     *\n     * @param {Number} [fps=Infinity]\n     *   The maximum number of frames per second to execute. If Infinity or not\n     *   passed, there will be no FPS cap (although other factors do limit the\n     *   FPS; see `MainLoop.setSimulationTimestep` for details). If zero, this\n     *   will stop the loop, and when the loop is next started, it will return\n     *   to the previous maximum frame rate. Passing negative values will stall\n     *   the loop until this function is called again with a positive value.\n     *\n     * @chainable\n     */\n    setMaxAllowedFPS(fps: number): void {\n        if (typeof fps === 'undefined') {\n            fps = Infinity;\n        }\n        if (fps === 0) {\n            this.stop();\n        }\n        else {\n            // Dividing by Infinity returns zero.\n            this.minFrameDelay = 1000 / fps;\n        }\n    }\n\n    /**\n     * Reset the amount of time that has not yet been simulated to zero.\n     *\n     * This introduces non-deterministic behavior if called after the\n     * application has started running (unless it is being reset, in which case\n     * it doesn't matter). However, this can be useful in cases where the\n     * amount of time that has not yet been simulated has grown very large\n     * (for example, when the application's tab gets put in the background and\n     * the browser throttles the timers as a result). In applications with\n     * lockstep the player would get dropped, but in other networked\n     * applications it may be necessary to snap or ease the player/user to the\n     * authoritative state and discard pending updates in the process. In\n     * non-networked applications it may also be acceptable to simply resume\n     * the application where it last left off and ignore the accumulated\n     * unsimulated time.\n     *\n     * @return {Number}\n     *   The cumulative amount of elapsed time in milliseconds that has not yet\n     *   been simulated, but is being discarded as a result of calling this\n     *   function.\n     */\n    resetFrameDelta() : number {\n        var oldFrameDelta = this.frameDelta;\n        this.frameDelta = 0;\n        return oldFrameDelta;\n    }\n\n    /**\n     * Starts the main loop.\n     *\n     * Note that the application is not considered \"running\" immediately after\n     * this function returns; rather, it is considered \"running\" after the\n     * application draws its first frame. The distinction is that event\n     * handlers should remain paused until the application is running, even\n     * after `MainLoop.start()` is called. Check `MainLoop.isRunning()` for the\n     * current status. To act after the application starts, register a callback\n     * with requestAnimationFrame() after calling this function and execute the\n     * action in that callback. It is safe to call `MainLoop.start()` multiple\n     * times even before the application starts running and without calling\n     * `MainLoop.stop()` in between, although there is no reason to do this;\n     * the main loop will only start if it is not already started.\n     *\n     * See also `MainLoop.stop()`.\n     */\n    start(): void {\n        if (!this.started) {\n            // Since the application doesn't start running immediately, track\n            // whether this function was called and use that to keep it from\n            // starting the main loop multiple times.\n            this.started = true;\n\n            // In the main loop, draw() is called after update(), so if we\n            // entered the main loop immediately, we would never render the\n            // initial state before any updates occur. Instead, we run one\n            // frame where all we do is draw, and then start the main loop with\n            // the next frame.\n            this.raf = requestAnimationFrame(this.startLoop.bind(this));\n        }\n    }\n\n    startLoop(timestamp : number): void {\n        // Render the initial state before any updates occur.\n        this.draw(1);\n\n        // The application isn't considered \"running\" until the\n        // application starts drawing.\n        this.running = true;\n\n        // Reset variables that are used for tracking time so that we\n        // don't simulate time passed while the application was paused.\n        this.lastFrameTimeMs = timestamp;\n        this.lastFpsUpdate = timestamp;\n        this.framesSinceLastFpsUpdate = 0;\n\n        // Start the main loop.\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\n    }\n\n    /**\n     * Returns whether the main loop is currently running.\n     *\n     * See also `MainLoop.start()` and `MainLoop.stop()`.\n     *\n     * @return {Boolean}\n     *   Whether the main loop is currently running.\n     */\n    isRunning(): boolean {\n        return this.running;\n    }\n\n    /**\n     * Stops the main loop.\n     *\n     * Event handling and other background tasks should also be paused when the\n     * main loop is paused.\n     *\n     * Note that pausing in multiplayer/multi-user applications will cause the\n     * player's/user's client to become out of sync. In this case the\n     * simulation should exit, or the player/user needs to be snapped to their\n     * updated position when the main loop is started again.\n     *\n     * See also `MainLoop.start()` and `MainLoop.isRunning()`.\n     */\n    stop(): void {\n        this.running = false;\n        this.started = false;\n        window.cancelAnimationFrame(this.raf);\n    }\n\n    /**\n     * The main loop that runs updates and rendering.\n     * \n     * @param {DOMHighResTimeStamp} timestamp\n     * The current timestamp. In practice this is supplied by\n     * requestAnimationFrame at the time that it starts to fire callbacks. This\n     * should only be used for comparison to other timestamps because the epoch\n     * (i.e. the \"zero\" time) depends on the engine running this code. In engines\n     * that support `DOMHighResTimeStamp` (all modern browsers except iOS Safari\n     * 8) the epoch is the time the page started loading, specifically\n     * `performance.timing.navigationStart`. Everywhere else, including node.js,\n     * the epoch is the Unix epoch (1970-01-01T00:00:00Z).\n     * \n     * @ignore\n     */\n    animate(timestamp : number): void {\n        // Run the loop again the next time the browser is ready to render.\n        // We set rafHandle immediately so that the next frame can be canceled\n        // during the current frame.\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\n\n        // Throttle the frame rate (if minFrameDelay is set to a non-zero value by\n        // `MainLoop.setMaxAllowedFPS()`).\n        if (timestamp < this.lastFrameTimeMs + this.minFrameDelay) {\n            return;\n        }\n\n        // frameDelta is the cumulative amount of in-app time that hasn't been\n        // simulated yet. Add the time since the last frame. We need to track total\n        // not-yet-simulated time (as opposed to just the time elapsed since the\n        // last frame) because not all actually elapsed time is guaranteed to be\n        // simulated each frame. See the comments below for details.\n        this.frameDelta += timestamp - this.lastFrameTimeMs;\n        this.lastFrameTimeMs = timestamp;\n\n        // Run any updates that are not dependent on time in the simulation. See\n        // `MainLoop.setBegin()` for additional details on how to use this.\n        this.begin(timestamp, this.frameDelta);\n\n        // Update the estimate of the frame rate, `fps`. Approximately every\n        // second, the number of frames that occurred in that second are included\n        // in an exponential moving average of all frames per second. This means\n        // that more recent seconds affect the estimated frame rate more than older\n        // seconds.\n        if (timestamp > this.lastFpsUpdate + this.fpsUpdateInterval) {\n            // Compute the new exponential moving average.\n            this.fps =\n                // Divide the number of frames since the last FPS update by the\n                // amount of time that has passed to get the mean frames per second\n                // over that period. This is necessary because slightly more than a\n                // second has likely passed since the last update.\n                this.fpsAlpha * this.framesSinceLastFpsUpdate * 1000 / (timestamp - this.lastFpsUpdate) +\n                (1 - this.fpsAlpha) * this.fps;\n\n            // Reset the frame counter and last-updated timestamp since their\n            // latest values have now been incorporated into the FPS estimate.\n            this.lastFpsUpdate = timestamp;\n            this.framesSinceLastFpsUpdate = 0;\n        }\n        // Count the current frame in the next frames-per-second update. This\n        // happens after the previous section because the previous section\n        // calculates the frames that occur up until `timestamp`, and `timestamp`\n        // refers to a time just before the current frame was delivered.\n        this.framesSinceLastFpsUpdate++;\n\n        /*\n         * A naive way to move an object along its X-axis might be to write a main\n         * loop containing the statement `obj.x += 10;` which would move the object\n         * 10 units per frame. This approach suffers from the issue that it is\n         * dependent on the frame rate. In other words, if your application is\n         * running slowly (that is, fewer frames per second), your object will also\n         * appear to move slowly, whereas if your application is running quickly\n         * (that is, more frames per second), your object will appear to move\n         * quickly. This is undesirable, especially in multiplayer/multi-user\n         * applications.\n         *\n         * One solution is to multiply the speed by the amount of time that has\n         * passed between rendering frames. For example, if you want your object to\n         * move 600 units per second, you might write `obj.x += 600 * delta`, where\n         * `delta` is the time passed since the last frame. (For convenience, let's\n         * move this statement to an update() function that takes `delta` as a\n         * parameter.) This way, your object will move a constant distance over\n         * time. However, at low frame rates and high speeds, your object will move\n         * large distances every frame, which can cause it to do strange things\n         * such as move through walls. Additionally, we would like our program to\n         * be deterministic. That is, every time we run the application with the\n         * same input, we would like exactly the same output. If the time between\n         * frames (the `delta`) varies, our output will diverge the longer the\n         * program runs due to accumulated rounding errors, even at normal frame\n         * rates.\n         *\n         * A better solution is to separate the amount of time simulated in each\n         * update() from the amount of time between frames. Our update() function\n         * doesn't need to change; we just need to change the delta we pass to it\n         * so that each update() simulates a fixed amount of time (that is, `delta`\n         * should have the same value each time update() is called). The update()\n         * function can be run multiple times per frame if needed to simulate the\n         * total amount of time passed since the last frame. (If the time that has\n         * passed since the last frame is less than the fixed simulation time, we\n         * just won't run an update() until the the next frame. If there is\n         * unsimulated time left over that is less than our timestep, we'll just\n         * leave it to be simulated during the next frame.) This approach avoids\n         * inconsistent rounding errors and ensures that there are no giant leaps\n         * through walls between frames.\n         *\n         * That is what is done below. It introduces a new problem, but it is a\n         * manageable one: if the amount of time spent simulating is consistently\n         * longer than the amount of time between frames, the application could\n         * freeze and crash in a spiral of death. This won't happen as long as the\n         * fixed simulation time is set to a value that is high enough that\n         * update() calls usually take less time than the amount of time they're\n         * simulating. If it does start to happen anyway, see `MainLoop.setEnd()`\n         * for a discussion of ways to stop it.\n         *\n         * Additionally, see `MainLoop.setUpdate()` for a discussion of performance\n         * considerations.\n         *\n         * Further reading for those interested:\n         *\n         * - http://gameprogrammingpatterns.com/game-loop.html\n         * - http://gafferongames.com/game-physics/fix-your-timestep/\n         * - https://gamealchemist.wordpress.com/2013/03/16/thoughts-on-the-javascript-game-loop/\n         * - https://developer.mozilla.org/en-US/docs/Games/Anatomy\n         */\n        this.numUpdateSteps = 0;\n        while (this.frameDelta >= this.simulationTimestep) {\n            this.update(this.simulationTimestep);\n            this.frameDelta -= this.simulationTimestep;\n\n            /*\n             * Sanity check: bail if we run the loop too many times.\n             *\n             * One way this could happen is if update() takes longer to run than\n             * the time it simulates, thereby causing a spiral of death. For ways\n             * to avoid this, see `MainLoop.setEnd()`. Another way this could\n             * happen is if the browser throttles serving frames, which typically\n             * occurs when the tab is in the background or the device battery is\n             * low. An event outside of the main loop such as audio processing or\n             * synchronous resource reads could also cause the application to hang\n             * temporarily and accumulate not-yet-simulated time as a result.\n             *\n             * 240 is chosen because, for any sane value of simulationTimestep, 240\n             * updates will simulate at least one second, and it will simulate four\n             * seconds with the default value of simulationTimestep. (Safari\n             * notifies users that the script is taking too long to run if it takes\n             * more than five seconds.)\n             *\n             * If there are more updates to run in a frame than this, the\n             * application will appear to slow down to the user until it catches\n             * back up. In networked applications this will usually cause the user\n             * to get out of sync with their peers, but if the updates are taking\n             * this long already, they're probably already out of sync.\n             */\n            if (++this.numUpdateSteps >= 240) {\n                this.panic = true;\n                break;\n            }\n        }\n\n        /*\n         * Render the screen. We do this regardless of whether update() has run\n         * during this frame because it is possible to interpolate between updates\n         * to make the frame rate appear faster than updates are actually\n         * happening. See `MainLoop.setDraw()` for an explanation of how to do\n         * that.\n         *\n         * We draw after updating because we want the screen to reflect a state of\n         * the application that is as up-to-date as possible. (`MainLoop.start()`\n         * draws the very first frame in the application's initial state, before\n         * any updates have occurred.) Some sources speculate that rendering\n         * earlier in the requestAnimationFrame callback can get the screen painted\n         * faster; this is mostly not true, and even when it is, it's usually just\n         * a trade-off between rendering the current frame sooner and rendering the\n         * next frame later.\n         *\n         * See `MainLoop.setDraw()` for details about draw() itself.\n         */\n        this.draw(this.frameDelta / this.simulationTimestep);\n\n        // Run any updates that are not dependent on time in the simulation. See\n        // `MainLoop.setEnd()` for additional details on how to use this.\n        this.end(this.fps, this.panic);\n\n        this.panic = false;\n    }\n\n    // SUBCLASSES MUST OVERRIDE FOUR REQUIRED METHODS:\n        // begin\n        // update\n        // draw\n        // end\n\n    /**\n     * A function that runs at the beginning of the main loop.\n     *\n     * The begin() function is typically used to process input before the\n     * updates run. Processing input here (in chunks) can reduce the running\n     * time of event handlers, which is useful because long-running event\n     * handlers can sometimes delay frames.\n     *\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\n     * frame, begin() always runs exactly once per frame. This makes it useful\n     * for any updates that are not dependent on time in the simulation.\n     * Examples include adjusting HUD calculations or performing long-running\n     * updates incrementally. Compared to {@link #setEnd end}(), generally\n     * actions should occur in begin() if they affect anything that\n     * {@link #setUpdate update}() or {@link #setDraw draw}() use.\n     *\n     * @param {Function} begin\n     *   The begin() function.\n     * @param {Number} [begin.timestamp]\n     *   The current timestamp (when the frame started), in milliseconds. This\n     *   should only be used for comparison to other timestamps because the\n     *   epoch (i.e. the \"zero\" time) depends on the engine running this code.\n     *   In engines that support `DOMHighResTimeStamp` (all modern browsers\n     *   except iOS Safari 8) the epoch is the time the page started loading,\n     *   specifically `performance.timing.navigationStart`. Everywhere else,\n     *   including node.js, the epoch is the Unix epoch (1970-01-01T00:00:00Z).\n     * @param {Number} [begin.delta]\n     *   The total elapsed time that has not yet been simulated, in\n     *   milliseconds.\n     */\n    abstract begin(timestamp : number, delta : number) : void;\n\n    /**\n     * A function that runs updates (i.e. AI and physics).\n     *\n     * The update() function should simulate anything that is affected by time.\n     * It can be called zero or more times per frame depending on the frame\n     * rate.\n     *\n     * As with everything in the main loop, the running time of update()\n     * directly affects the frame rate. If update() takes long enough that the\n     * frame rate drops below the target (\"budgeted\") frame rate, parts of the\n     * update() function that do not need to execute between every frame can be\n     * moved into Web Workers. (Various sources on the internet sometimes\n     * suggest other scheduling patterns using setTimeout() or setInterval().\n     * These approaches sometimes offer modest improvements with minimal\n     * changes to existing code, but because JavaScript is single-threaded, the\n     * updates will still block rendering and drag down the frame rate. Web\n     * Workers execute in separate threads, so they free up more time in the\n     * main loop.)\n     *\n     * This script can be imported into a Web Worker using importScripts() and\n     * used to run a second main loop in the worker. Some considerations:\n     *\n     * - Profile your code before doing the work to move it into Web Workers.\n     *   It could be the rendering that is the bottleneck, in which case the\n     *   solution is to decrease the visual complexity of the scene.\n     * - It doesn't make sense to move the *entire* contents of update() into\n     *   workers unless {@link #setDraw draw}() can interpolate between frames.\n     *   The lowest-hanging fruit is background updates (like calculating\n     *   citizens' happiness in a city-building game), physics that doesn't\n     *   affect the scene (like flags waving in the wind), and anything that is\n     *   occluded or happening far off screen.\n     * - If draw() needs to interpolate physics based on activity that occurs\n     *   in a worker, the worker needs to pass the interpolation value back to\n     *   the main thread so that is is available to draw().\n     * - Web Workers can't access the state of the main thread, so they can't\n     *   directly modify objects in your scene. Moving data to and from Web\n     *   Workers is a pain. The fastest way to do it is with Transferable\n     *   Objects: basically, you can pass an ArrayBuffer to a worker,\n     *   destroying the original reference in the process.\n     *\n     * You can read more about Web Workers and Transferable Objects at\n     * [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/workers/basics/).\n     *\n     * @param {Function} update\n     *   The update() function.\n     * @param {Number} [update.delta]\n     *   The amount of time in milliseconds to simulate in the update. In most\n     *   cases this timestep never changes in order to ensure deterministic\n     *   updates. The timestep is the same as that returned by\n     *   `MainLoop.getSimulationTimestep()`.\n     */\n    abstract update(timeStep : number) : void;\n\n    /**\n     * A function that draws things on the screen.\n     *\n     * The draw() function gets passed the percent of time that the next run of\n     * {@link #setUpdate update}() will simulate that has actually elapsed, as\n     * a decimal. In other words, draw() gets passed how far between update()\n     * calls it is. This is useful because the time simulated by update() and\n     * the time between draw() calls is usually different, so the parameter to\n     * draw() can be used to interpolate motion between frames to make\n     * rendering appear smoother. To illustrate, if update() advances the\n     * simulation at each vertical bar in the first row below, and draw() calls\n     * happen at each vertical bar in the second row below, then some frames\n     * will have time left over that is not yet simulated by update() when\n     * rendering occurs in draw():\n     *\n     *     update() timesteps:  |  |  |  |  |  |  |  |  |\n     *     draw() calls:        |   |   |   |   |   |   |\n     *\n     * To interpolate motion for rendering purposes, objects' state after the\n     * last update() must be retained and used to calculate an intermediate\n     * state. Note that this means renders will be up to one update() behind.\n     * This is still better than extrapolating (projecting objects' state after\n     * a future update()) which can produce bizarre results. Storing multiple\n     * states can be difficult to set up, and keep in mind that running this\n     * process takes time that could push the frame rate down, so it's often\n     * not worthwhile unless stuttering is visible.\n     *\n     * @param {Function} draw\n     *   The draw() function.\n     * @param {Number} [draw.interpolationPercentage]\n     *   The cumulative amount of time that hasn't been simulated yet, divided\n     *   by the amount of time that will be simulated the next time update()\n     *   runs. Useful for interpolating frames.\n     */\n    public abstract draw(interpolationPercentage : number) : void;\n\n    /**\n     * A function that runs at the end of the main loop.\n     *\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\n     * frame, end() always runs exactly once per frame. This makes it useful\n     * for any updates that are not dependent on time in the simulation.\n     * Examples include cleaning up any temporary state set up by\n     * {@link #setBegin begin}(), lowering the visual quality if the frame rate\n     * is too low, or performing long-running updates incrementally. Compared\n     * to begin(), generally actions should occur in end() if they use anything\n     * that update() or {@link #setDraw draw}() affect.\n     *\n     * @param {Function} end\n     *   The end() function.\n     * @param {Number} [end.fps]\n     *   The exponential moving average of the frames per second. This is the\n     *   same value returned by `MainLoop.getFPS()`. It can be used to take\n     *   action when the FPS is too low (or to restore to normalcy if the FPS\n     *   moves back up). Examples of actions to take if the FPS is too low\n     *   include exiting the application, lowering the visual quality, stopping\n     *   or reducing activities outside of the main loop like event handlers or\n     *   audio playback, performing non-critical updates less frequently, or\n     *   increasing the simulation timestep (by calling\n     *   `MainLoop.setSimulationTimestep()`). Note that this last option\n     *   results in more time being simulated per update() call, which causes\n     *   the application to behave non-deterministically.\n     * @param {Boolean} [end.panic=false]\n     *   Indicates whether the simulation has fallen too far behind real time.\n     *   Specifically, `panic` will be `true` if too many updates occurred in\n     *   one frame. In networked lockstep applications, the application should\n     *   wait for some amount of time to see if the user can catch up before\n     *   dropping the user. In networked but non-lockstep applications, this\n     *   typically indicates that the user needs to be snapped or eased to the\n     *   current authoritative state. When this happens, it may be convenient\n     *   to call `MainLoop.resetFrameDelta()` to discard accumulated pending\n     *   updates. In non-networked applications, it may be acceptable to allow\n     *   the application to keep running for awhile to see if it will catch up.\n     *   However, this could also cause the application to look like it is\n     *   running very quickly for a few frames as it transitions through the\n     *   intermediate states. An alternative that may be acceptable is to\n     *   simply ignore the unsimulated elapsed time by calling\n     *   `MainLoop.resetFrameDelta()` even though this introduces\n     *   non-deterministic behavior. In all cases, if the application panics\n     *   frequently, this is an indication that the main loop is running too\n     *   slowly. However, most of the time the drop in frame rate will probably\n     *   be noticeable before a panic occurs. To help the application catch up\n     *   after a panic caused by a spiral of death, the same steps can be taken\n     *   that are suggested above if the FPS drops too low.\n     */\n    abstract end(fps : number, panic : boolean) : void;\n}","/*\n * MathUtilities provides a number of services for rendering using 4x4 matrices, like\n * transformting (i.e. translation, rotation, and scaling) 3d or 2d points from world\n * coordinate systems to screen coordinate systems.\n */\nimport {Matrix} from './Matrix'\nimport {Vector3} from './Vector3'\n\nexport namespace MathUtilities {\n    export function determinant4x4(result : Matrix) : number {\n        let det0 = result.get(0, 0) * (\n            (result.get(1, 1) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\n            - (result.get(1, 2) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\n            + (result.get(1, 3) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(3, 1) * result.get(2, 2)))));\n        let det1 = result.get(0, 1) * (\n            (result.get(1, 0) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\n            - (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(3, 0) * result.get(2, 3))))\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(3, 0) * result.get(2, 2)))));\n        let det2 = result.get(0, 2) * (\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 0))))\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\n        let det3 = result.get(0, 3) * (\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 1))))\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 0))))\n            + (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\n        let det = det0 - det1 + det2 - det3;\n        console.log(\"det = \" + det0 + \" + \" + det1 + \" + \" + det2 + \" + \" + det3);\n        return det;\n    }\n    export function identity(result : Matrix) : void {\n        if (result.getRows() === result.getColumns()) {\n            for (let i = 0; i < result.getRows(); i++) {\n                for (let j = 0; j < result.getColumns(); j++) {\n                    if (i === j)\n                        result.set(1.0, i, j);\n                    else\n                        result.set(0.0, i, j);\n                }\n            }\n        }\n    }\n    export function inverse(result : Matrix, mat : Matrix) : void {\n        let det = this.determinant(mat);\n        let m00 = mat.get(0, 0); let m01 = mat.get(0, 1); let m02 = mat.get(0, 2); let m03 = mat.get(0, 3);\n        let m10 = mat.get(1, 0); let m11 = mat.get(1, 1); let m12 = mat.get(1, 2); let m13 = mat.get(1, 3);\n        let m20 = mat.get(2, 0); let m21 = mat.get(2, 1); let m22 = mat.get(2, 2); let m23 = mat.get(2, 3);\n        let m30 = mat.get(3, 0); let m31 = mat.get(3, 1); let m32 = mat.get(3, 2); let m33 = mat.get(3, 3);\n        let temp = new Matrix(4, 4);\n        temp.set((m12 * m23 * m31) - (m13 * m22 * m31) + (m13 * m21 * m32) - (m11 * m23 * m32) - (m12 * m21 * m33) + (m11 * m22 * m33), 0, 0);\n        temp.set((m03 * m22 * m31) - (m02 * m23 * m31) - (m03 * m21 * m32) + (m01 * m23 * m32) + (m02 * m21 * m33) - (m01 * m22 * m33), 0, 1);\n        temp.set((m02 * m13 * m31) - (m03 * m12 * m31) + (m03 * m11 * m32) - (m01 * m13 * m32) - (m02 * m11 * m33) + (m01 * m12 * m33), 0, 2);\n        temp.set((m03 * m12 * m21) - (m02 * m13 * m21) - (m03 * m11 * m22) + (m01 * m13 * m22) + (m02 * m11 * m23) - (m01 * m12 * m23), 0, 3);\n        temp.set((m13 * m22 * m30) - (m12 * m23 * m30) - (m13 * m20 * m32) + (m10 * m23 * m32) + (m12 * m20 * m33) - (m10 * m22 * m33), 1, 0);\n        temp.set((m02 * m23 * m30) - (m03 * m22 * m30) + (m03 * m20 * m32) - (m00 * m23 * m32) - (m02 * m20 * m33) + (m00 * m22 * m33), 1, 1);\n        temp.set((m03 * m12 * m30) - (m02 * m13 * m30) - (m03 * m10 * m32) + (m00 * m13 * m32) + (m02 * m10 * m33) - (m00 * m12 * m33), 1, 2);\n        temp.set((m02 * m13 * m20) - (m03 * m12 * m20) + (m03 * m10 * m22) - (m00 * m13 * m22) - (m02 * m10 * m23) + (m00 * m12 * m23), 1, 3);\n        temp.set((m11 * m23 * m30) - (m13 * m21 * m30) + (m13 * m20 * m31) - (m10 * m23 * m31) - (m11 * m20 * m33) + (m10 * m21 * m33), 2, 0);\n        temp.set((m03 * m21 * m30) - (m01 * m23 * m30) - (m03 * m20 * m31) + (m00 * m23 * m31) + (m01 * m20 * m33) - (m00 * m21 * m33), 2, 1);\n        temp.set((m01 * m13 * m30) - (m03 * m11 * m30) + (m03 * m10 * m31) - (m00 * m13 * m31) - (m01 * m10 * m33) + (m00 * m11 * m33), 2, 2);\n        temp.set((m03 * m11 * m20) - (m01 * m13 * m20) - (m03 * m10 * m21) + (m00 * m13 * m21) + (m01 * m10 * m23) - (m00 * m11 * m23), 2, 3);\n        temp.set((m12 * m21 * m30) - (m11 * m22 * m30) - (m12 * m20 * m31) + (m10 * m22 * m31) + (m11 * m20 * m32) - (m10 * m21 * m32), 3, 0);\n        temp.set((m01 * m22 * m30) - (m02 * m21 * m30) + (m02 * m20 * m31) - (m00 * m22 * m31) - (m01 * m20 * m32) + (m00 * m21 * m32), 3, 1);\n        temp.set((m02 * m11 * m30) - (m01 * m12 * m30) - (m02 * m10 * m31) + (m00 * m12 * m31) + (m01 * m10 * m32) - (m00 * m11 * m32), 3, 2);\n        temp.set((m01 * m12 * m20) - (m02 * m11 * m20) + (m02 * m10 * m21) - (m00 * m12 * m21) - (m01 * m10 * m22) + (m00 * m11 * m22), 3, 3);\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                result.set(temp.get(i, j) / det, i, j);\n            }\n        }\n    }\n    export function model(result : Matrix, translation : Vector3, rotation : Vector3, scale : Vector3) : void {\n        // TRANSLATION MATRIX\t\n        let translationMatrix = new Matrix(4, 4);\n        this.identity(translationMatrix);\n        this.translate(translationMatrix, translation);\n\n        // ROTATION MATRIX\n        let rotationMatrix = new Matrix(4, 4);\n        this.identity(rotationMatrix);\n        this.rotate(rotationMatrix, rotation);\n\n        // SCALING MATRIX\n        let scaleMatrix = new Matrix(4, 4);\n        this.identity(scaleMatrix);\n        this.scale(scaleMatrix, scale);\n\n        // AND NOW MULTIPLY THEM TOGETHER IN THE CORRECT ORDER\n        let tempMatrix = new Matrix(4, 4);\n        this.multiply(tempMatrix, translationMatrix, rotationMatrix);\n        this.multiply(result, tempMatrix, scaleMatrix);\n    }\n\n    export function multiply(result : Matrix, mat0 : Matrix, mat1 : Matrix) : void {\n        // result MIGHT BE mat0 OR mat1 SO IT'S BEST IF WE\n        // CALCULATE TEMP VALUES FIRST BEFORE ASSIGNMENT\n        let r00 = (mat0.get(0, 0) * mat1.get(0, 0))\n            + (mat0.get(0, 1) * mat1.get(1, 0))\n            + (mat0.get(0, 2) * mat1.get(2, 0))\n            + (mat0.get(0, 3) * mat1.get(3, 0));\n        let r10 = (mat0.get(1, 0) * mat1.get(0, 0))\n            + (mat0.get(1, 1) * mat1.get(1, 0))\n            + (mat0.get(1, 2) * mat1.get(2, 0))\n            + (mat0.get(1, 3) * mat1.get(3, 0));\n        let r20 = (mat0.get(2, 0) * mat1.get(0, 0))\n            + (mat0.get(2, 1) * mat1.get(1, 0))\n            + (mat0.get(2, 2) * mat1.get(2, 0))\n            + (mat0.get(2, 3) * mat1.get(3, 0));\n        let r30 = (mat0.get(3, 0) * mat1.get(0, 0))\n            + (mat0.get(3, 1) * mat1.get(1, 0))\n            + (mat0.get(3, 2) * mat1.get(2, 0))\n            + (mat0.get(3, 3) * mat1.get(3, 0));\n        let r01 = (mat0.get(0, 0) * mat1.get(0, 1))\n            + (mat0.get(0, 1) * mat1.get(1, 1))\n            + (mat0.get(0, 2) * mat1.get(2, 1))\n            + (mat0.get(0, 3) * mat1.get(3, 1));\n        let r11 = (mat0.get(1, 0) * mat1.get(0, 1))\n            + (mat0.get(1, 1) * mat1.get(1, 1))\n            + (mat0.get(1, 2) * mat1.get(2, 1))\n            + (mat0.get(1, 3) * mat1.get(3, 1));\n        let r21 = (mat0.get(2, 0) * mat1.get(0, 1))\n            + (mat0.get(2, 1) * mat1.get(1, 1))\n            + (mat0.get(2, 2) * mat1.get(2, 1))\n            + (mat0.get(2, 3) * mat1.get(3, 1));\n        let r31 = (mat0.get(3, 0) * mat1.get(0, 1))\n            + (mat0.get(3, 1) * mat1.get(1, 1))\n            + (mat0.get(3, 2) * mat1.get(2, 1))\n            + (mat0.get(3, 3) * mat1.get(3, 1));\n        let r02 = (mat0.get(0, 0) * mat1.get(0, 2))\n            + (mat0.get(0, 1) * mat1.get(1, 2))\n            + (mat0.get(0, 2) * mat1.get(2, 2))\n            + (mat0.get(0, 3) * mat1.get(3, 2));\n        let r12 = (mat0.get(1, 0) * mat1.get(0, 2))\n            + (mat0.get(1, 1) * mat1.get(1, 2))\n            + (mat0.get(1, 2) * mat1.get(2, 2))\n            + (mat0.get(1, 3) * mat1.get(3, 2));\n        let r22 = (mat0.get(2, 0) * mat1.get(0, 2))\n            + (mat0.get(2, 1) * mat1.get(1, 2))\n            + (mat0.get(2, 2) * mat1.get(2, 2))\n            + (mat0.get(2, 3) * mat1.get(3, 2));\n        let r32 = (mat0.get(3, 0) * mat1.get(0, 2))\n            + (mat0.get(3, 1) * mat1.get(1, 2))\n            + (mat0.get(3, 2) * mat1.get(2, 2))\n            + (mat0.get(3, 3) * mat1.get(3, 2));\n        let r03 = (mat0.get(0, 0) * mat1.get(0, 3))\n            + (mat0.get(0, 1) * mat1.get(1, 3))\n            + (mat0.get(0, 2) * mat1.get(2, 3))\n            + (mat0.get(0, 3) * mat1.get(3, 3));\n        let r13 = (mat0.get(1, 0) * mat1.get(0, 3))\n            + (mat0.get(1, 1) * mat1.get(1, 3))\n            + (mat0.get(1, 2) * mat1.get(2, 3))\n            + (mat0.get(1, 3) * mat1.get(3, 3));\n        let r23 = (mat0.get(2, 0) * mat1.get(0, 3))\n            + (mat0.get(2, 1) * mat1.get(1, 3))\n            + (mat0.get(2, 2) * mat1.get(2, 3))\n            + (mat0.get(2, 3) * mat1.get(3, 3));\n        let r33 = (mat0.get(3, 0) * mat1.get(0, 3))\n            + (mat0.get(3, 1) * mat1.get(1, 3))\n            + (mat0.get(3, 2) * mat1.get(2, 3))\n            + (mat0.get(3, 3) * mat1.get(3, 3));\n\n        // NOW PUT ALL THE CALCULATED VALUES IN THE result MATRIX\n        result.set(r00, 0, 0);\n        result.set(r10, 1, 0);\n        result.set(r20, 2, 0);\n        result.set(r30, 3, 0);\n        result.set(r01, 0, 1);\n        result.set(r11, 1, 1);\n        result.set(r21, 2, 1);\n        result.set(r31, 3, 1);\n        result.set(r02, 0, 2);\n        result.set(r12, 1, 2);\n        result.set(r22, 2, 2);\n        result.set(r32, 3, 2);\n        result.set(r03, 0, 3);\n        result.set(r13, 1, 3);\n        result.set(r23, 2, 3);\n        result.set(r33, 3, 3);\n    }\n\n    export function projection(result : Matrix, nearZ : number, farZ : number, viewportWidth : number, viewportHeight : number, fovY : number) : void {\n        let aspectRatio = viewportWidth / viewportHeight;\n        let fieldOfViewY = this.math.degreesToRadians(fovY);\n        let fieldOfViewX = 2 * Math.atan(Math.tan(fieldOfViewY / 2) * aspectRatio);\n\n        // WE'LL USE THESE AS SHORTHAND FOR LOADING OUR MATRIX\n        let n = nearZ;\n        let f = farZ;\n        let r = Math.tan(fieldOfViewX / 2) * n;\n        let t = Math.tan(fieldOfViewY / 2) * n;\n\n        // 0-3\n        result.set(n / r, 0, 0);\n        result.set(0.0, 0, 1);\n        result.set(0.0, 0, 2);\n        result.set(0.0, 0, 3);\n        // 4-7\n        result.set(0.0, 1, 0);\n        result.set(n / t, 1, 1);\n        result.set(0.0, 1, 2);\n        result.set(0.0, 1, 3);\n        // 8-11\n        result.set(0.0, 2, 0);\n        result.set(0.0, 2, 1);\n        result.set((-(f + n)) / (f - n), 2, 2);\n        result.set((-2 * f * n) / (f - n), 2, 3);\n        // 12-15 \n        result.set(0.0, 3, 0);\n        result.set(0.0, 3, 1);\n        result.set(-1.0, 3, 2);\n        result.set(0.0, 3, 3);\n    }\n\n    export function rotate(result : Matrix, rotationVector : Vector3) : void {\n        // START WITH THE X-AXIS ROTATION\n        let xRotationMatrix = new Matrix(4, 4);\n        this.identity(xRotationMatrix);\n        let thetaX = rotationVector.getThetaX();\n        xRotationMatrix.set(Math.cos(thetaX), 1, 1);\n        xRotationMatrix.set(Math.sin(thetaX), 2, 1);\n        xRotationMatrix.set(-1 * Math.sin(thetaX), 1, 2);\n        xRotationMatrix.set(Math.cos(thetaX), 2, 2);\n\n        // START WITH THE Y-AXIS ROTATION\n        let yRotationMatrix = new Matrix(4, 4);\n        this.identity(yRotationMatrix);\n        let thetaY = rotationVector.getThetaY();\n        yRotationMatrix.set(Math.cos(thetaY), 0, 0);\n        yRotationMatrix.set(-1 * Math.sin(thetaY), 2, 0);\n        yRotationMatrix.set(Math.sin(thetaY), 0, 2);\n        yRotationMatrix.set(Math.cos(thetaY), 2, 2);\n\n        // START WITH THE Z-AXIS ROTATION\n        let zRotationMatrix = new Matrix(4, 4);\n        this.identity(zRotationMatrix);\n        let thetaZ = rotationVector.getThetaZ();\n        zRotationMatrix.set(Math.cos(thetaZ), 0, 0);\n        zRotationMatrix.set(Math.sin(thetaZ), 1, 0);\n        zRotationMatrix.set(-1 * Math.sin(thetaZ), 0, 1);\n        zRotationMatrix.set(Math.cos(thetaZ), 1, 1);\n\n        // START WITH THE X-AXIS ROTATION\n        let tempMatrix = new Matrix(4, 4);\n        this.identity(tempMatrix);\n        this.multiply(tempMatrix, xRotationMatrix, yRotationMatrix);\n        this.multiply(result, tempMatrix, zRotationMatrix);\n    }\n\n    export function scale(result : Matrix, scaleVector : Vector3) : void {\n        // START WITH THE IDENTITY MATRIX\n        this.identity(result, scaleVector);\n\n        // AND THEN LOAD IN THE TRANSLATION VALUES\n        result.set(scaleVector.getX(), 0, 0);\n        result.set(scaleVector.getY(), 1, 1);\n        result.set(scaleVector.getZ(), 2, 2);\n    }\n\n    export function transform(result : Vector3, mat : Matrix, vec : Vector3) : void {\n        result.setX((mat.get(0, 0) * vec.getX()) + (mat.get(0, 1) * vec.getY()) + (mat.get(0, 2) * vec.getZ()) + (mat.get(0, 3) * vec.getW()));\n        result.setY((mat.get(1, 0) * vec.getX()) + (mat.get(1, 1) * vec.getY()) + (mat.get(1, 2) * vec.getZ()) + (mat.get(1, 3) * vec.getW()));\n        result.setZ((mat.get(2, 0) * vec.getX()) + (mat.get(2, 1) * vec.getY()) + (mat.get(2, 2) * vec.getZ()) + (mat.get(2, 3) * vec.getW()));\n        result.setW((mat.get(3, 0) * vec.getX()) + (mat.get(3, 1) * vec.getY()) + (mat.get(3, 2) * vec.getZ()) + (mat.get(3, 3) * vec.getW()));\n    }\n\n    export function translate(result : Matrix, translationVector : Vector3) : void {\n        // START WITH THE IDENTITY MATRIX\n        this.identity(result);\n\n        // AND THEN LOAD IN THE TRANSLATION VALUES\n        result.set(translationVector.getX(), 0, 3);\n        result.set(translationVector.getY(), 1, 3);\n        result.set(translationVector.getZ(), 2, 3);\n    }\n\n    export function transpose(result : Matrix, mat : Matrix) : void {\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                let temp = mat.get(i, j);\n                result.set(temp, j, i);\n            }\n        }\n    }\n\n    export function view(result : Matrix, cameraPosition : Vector3, cameraOrientation : Vector3) : void {\n        let pitch = this.math.degreesToRadians(cameraOrientation.getThetaX());\n        let yaw = this.math.degreesToRadians(cameraOrientation.getThetaY());\n        let roll = this.math.degreesToRadians(cameraOrientation.getThetaZ());\n\n        // TO TRANSLATE\n        let translateVector = this.math.vectorMath.createPositionVector();\n        translateVector.set(-cameraPosition.getX(), -cameraPosition.getY(), -cameraPosition.getZ());\n        let translateMatrix = new Matrix(4, 4);\n        this.identity(translateMatrix);\n        this.translate(translateMatrix, translateVector);\n\n        // TO ROTATE\n        let rotateVector = this.math.vectorMath.createRotationVector();\n        rotateVector.set(-pitch, -yaw, -roll);\n        let rotateMatrix = new Matrix(4, 4);\n        this.rotate(rotateMatrix, rotateVector);\n\n        // NOW COMBINE THE 2 MATRICES\n        this.multiply(result, rotateMatrix, translateMatrix);\n    }\n\n    export function addVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\n        for (let i = 0; i < vec0.getSize(); i++) {\n            let total = vec0.getAt(i) + vec1.getAt(i);\n            result.setAt(i, total);\n        }\n    }\n\n    export function crossProduct(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\n        let result0 = (vec0.getY() * vec1.getZ())\n            - (vec1.getY() * vec0.getZ());\n        let result1 = (vec0.getZ() * vec1.getX())\n            - (vec1.getZ() * vec0.getX());\n        let result2 = (vec0.getX() * vec1.getY())\n            - (vec1.getX() * vec0.getY());\n        result.setX(result0);\n        result.setY(result1);\n        result.setZ(result2);\n    }\n\n    export function dotProduct(vec0 : Vector3, vec1 : Vector3) : number {\n        let resultX = vec0.getX() * vec1.getX();\n        let resultY = vec0.getY() * vec1.getY();\n        let resultZ = vec0.getZ() * vec1.getZ();\n        return resultX + resultY + resultZ;\n    }\n\n    export function multiplyVectors(result : Vector3, vec : Vector3, scalar : number) : void {\n        let vecX = vec.getX() * scalar;\n        let vecY = vec.getY() * scalar;\n        let vecZ = vec.getZ() * scalar;\n        result.setX(vecX);\n        result.setY(vecY);\n        result.setZ(vecZ);\n    }\n\n    export function normalize(result : Vector3, vec : Vector3) : void {\n        let xSquared = vec.getX() * vec.getX();\n        let ySquared = vec.getY() * vec.getY();\n        let zSquared = vec.getZ() * vec.getZ();\n        let distance = Math.sqrt(xSquared + ySquared + zSquared);\n        result.setX(vec.getX() / distance);\n        result.setY(vec.getY() / distance);\n        result.setZ(vec.getZ() / distance);\n    }\n\n    export function subtractVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\n        let resultX = vec0.getX() - vec1.getX();\n        let resultY = vec0.getY() - vec1.getY();\n        let resultZ = vec0.getZ() - vec1.getZ();\n        result.setX(resultX);\n        result.setY(resultY);\n        result.setZ(resultZ);\n    }\n}","/*\n * A Matrix is used for transforming points from local\n * coordinates to world coordinates.\n */\nexport class Matrix {\n    private mat : Float32Array;\n    private rows : number;\n    private columns : number;\n\n    public constructor(rows : number, columns : number) {\n        this.rows = rows;\n        this.columns = columns;\n        this.mat = new Float32Array(rows * columns);\n        for (let i = 0; i < (rows * columns); i++)\n            this.mat[i] = 0.0;\n    }\n\n    public getData() : Float32Array {\n        return this.mat;\n    }\n\n    public getRows() : number {\n        return this.rows;\n    }\n\n    public getColumns() : number {\n        return this.columns;\n    }\n\n    public getIndex (rows : number, columns : number) : number {\n        return (this.rows * columns) + rows;\n    }\n    \n    public get (row : number, column : number) : number {\n        let index = this.getIndex(row, column);\n        let valueToReturn = this.mat[index];\n        return valueToReturn;\n    }\n\n    public set (value : number, row : number, column : number) {\n        let index = this.getIndex(row, column);\n        this.mat[index] = value;\n    }\n    \n    public print () : void {\n        let maxWidth = 0;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                let testNum = this.get(j, i) + \"\";\n                if (testNum.length > maxWidth) {\n                    maxWidth = testNum.length;\n                }\n            }\n        }\n        let text = \"[ \";\n        for (let i = 0; i < this.rows; i++) {\n            if (i > 0)\n                text += \"  \";\n            for (var j = 0; j < this.columns; j++) {\n                var numText = this.get(i, j) + \"\";\n                while (numText.length < maxWidth) {\n                    numText = \" \" + numText;\n                }\n                text += numText;\n                if (j < (this.columns - 1)) {\n                    text += \",\";\n                }\n                text += \" \";\n            }\n            if (i < (this.rows - 1)) {\n                text += \"\\n\";\n            }\n            text += \"]\";\n            console.log(text);\n        }\n    }\n}","/**\n * Vector3\n * \n * The Vector3 class can be used for any 2d or 3d point, vector, \n * or rotation (i.e. angles of orientation).\n */\nexport class Vector3 {\n    private vec : Float32Array;\n    private size : number;\n\n    public constructor() {\n        this.vec = new Float32Array(4);\n        for (let i = 0; i < 4; i++)\n            this.vec[i] = 0.0;\n        this.size = 4;\n    }\n\n    public getSize() : number {\n        return this.size;\n    }\n\n    public getAt(index : number) : number {\n        return this.vec[index];\n    }\n\n    public getX() : number {\n        return this.vec[0];\n    }\n\n    public getY() : number {\n        return this.vec[1];\n    }\n\n    public getZ() : number {\n        return this.vec[2];\n    }\n\n    public getW() : number {\n        return this.vec[3];\n    }\n\n    public getThetaX() : number {\n        return this.vec[0];\n    }\n\n    public getThetaY() : number {\n        return this.vec[1];\n    }\n\n    public getThetaZ() : number {\n        return this.vec[2];\n    }\n\n    public set(init0 : number, init1 : number, init2 : number, init3 : number) : void {\n        this.vec[0] = init0;\n        this.vec[1] = init1;\n        this.vec[2] = init2;\n        this.vec[3] = init3;\n    }\n\n    public setAt(index : number, value : number) : void {\n        this.vec[index] = value;\n    }\n\n    public setX(initX : number) : void {\n        this.vec[0] = initX;\n    }\n\n    public setY(initY : number) : void {\n        this.vec[1] = initY;\n    }\n\n    public setZ(initZ : number) : void {\n        this.vec[2] = initZ;\n    }\n\n    public setW(initW : number) : void {\n        this.vec[3] = initW;\n    }\n\n    public setThetaX(initThetaX : number) : void {\n        this.setX(initThetaX);\n    }\n\n    public setThetaY(initThetaY : number) : void {\n        this.setY(initThetaY);\n    }\n\n    public setThetaZ(initThetaZ : number) : void {\n        this.setZ(initThetaZ);\n    }\n\n    public print() : void {\n        let text = \"[\";\n        for (let i = 0; i < this.size; i++) {\n            text += this.vec[i];\n            if (i < (this.size - 1)) {\n                text += \", \";\n            }\n        }\n        text += \"]\";\n        console.log(text);\n    }\n}","/*\n * This class renders text to a canvas, updated each frame.\n */\nimport {HashTable} from '../data/HashTable'\n\nexport class TextToRender {\n    public id : string;\n    public text : string;\n    public x : number;\n    public y : number;\n    public update : Function;\n    public fontFamily : string;\n    public fontSize : number;\n    public fontColor : string;\n    public properties : HashTable<object>;\n\n    public constructor(initId : string, initText : string, initX : number, initY : number, initUpdate : Function) {\n        this.id = initId;\n        this.text = initText;\n        this.x = initX;\n        this.y = initY;\n        this.update = initUpdate;\n        this.fontFamily = \"\";\n        this.fontSize = 0;\n        this.fontColor = \"\";\n        this.properties = {};\n    }\n}\n\nexport class TextRenderer {\n    private textToRender : Array<TextToRender>;\n    private textCanvas : HTMLCanvasElement;\n    private textCanvasWidth : number;\n    private textCanvasHeight : number;\n    private textCtx : CanvasRenderingContext2D;\n    private defaultFontFamily : string;\n    private defaultFontSize : number;\n    private defaultFontColor : string;\n\n    public constructor(textCanvasId : string, initFontFamily : string, initFontSize : number, initFontColor : string) {\n        this.textToRender = new Array();\n        this.textCanvas = <HTMLCanvasElement>document.getElementById(textCanvasId);\n        this.textCanvas.width = window.innerWidth;\n        this.textCanvas.height = window.innerHeight;\n        this.textCanvasWidth = this.textCanvas.width;\n        this.textCanvasHeight = this.textCanvas.height;\n        this.textCtx = this.textCanvas.getContext(\"2d\");\n        this.defaultFontFamily = initFontFamily;\n        this.defaultFontSize = initFontSize;\n        this.defaultFontColor = initFontColor;\n    }\n    \n    public addTextToRender(textToAdd : TextToRender) : void {\n        textToAdd.fontFamily = this.defaultFontFamily;\n        textToAdd.fontSize = this.defaultFontSize;\n        textToAdd.fontColor = this.defaultFontColor;\n        this.textToRender.push(textToAdd);\n    }\n\n    public clear() : void {\n        this.textToRender = [];\n    }\n\n    public getCanvasWidth() : number {\n        return this.textCanvasWidth;\n    }\n\n    public getCanvasHeight() : number {\n        return this.textCanvasHeight;\n    }\n\n    public render() : void {\n        this.textCtx.clearRect(0, 0, this.textCanvas.width, this.textCanvas.height);\n        for (var i = 0; i < this.textToRender.length; i++) {\n            var textToRender = this.textToRender[i];\n            textToRender.update();\n            this.textCtx.font = \"\" + textToRender.fontSize + \"px \" + textToRender.fontFamily;\n            this.textCtx.fillStyle = textToRender.fontColor;\n            this.textCtx.fillText(textToRender.text, textToRender.x, textToRender.y);\n        }\n    }\n}","import {WebGLGameShader} from './WebGLGameShader'\r\nimport {MathUtilities} from '../math/MathUtilities'\r\nimport { Matrix } from '../math/Matrix'\r\nimport { Vector3 } from '../math/Vector3'\r\nimport {GradientCircle} from '../scene/sprite/GradientCircle'\r\nimport {HashTable} from '../data/HashTable'\r\n\r\nvar CircleDefaults = {\r\n    A_POSITION: \"a_Position\",\r\n    A_VALUE_TO_INTERPOLATE: \"a_ValueToInterpolate\",\r\n    U_COLOR : \"u_Color\",\r\n    U_SPRITE_TRANSFORM: \"u_SpriteTransform\",\r\n    NUM_VERTICES: 4,\r\n    FLOATS_PER_VERTEX: 2,\r\n    TOTAL_BYTES: 16,\r\n    VERTEX_POSITION_OFFSET: 0,\r\n    INDEX_OF_FIRST_VERTEX: 0\r\n};\r\n\r\nexport class WebGLGameCircleRenderer{\r\n    private shader : WebGLGameShader;\r\n    private vertexTexCoordBuffer : WebGLBuffer;\r\n\r\n    private spriteTransform : Matrix;\r\n    private spriteTranslate : Vector3;\r\n    private spriteRotate : Vector3;\r\n    private spriteScale : Vector3;\r\n\r\n    private webGLAttributeLocations : HashTable<GLuint>;\r\n    private webGLUniformLocations : HashTable<WebGLUniformLocation>;\r\n\r\n    public constructor() {}\r\n\r\n    public init(webGL : WebGLRenderingContext) : void {\r\n        this.shader = new WebGLGameShader();\r\n        \r\n        var vertexShaderSource =\r\n            'precision highp float;\\n' +\r\n            'attribute vec4 ' + CircleDefaults.A_POSITION + ';\\n' +\r\n            'attribute vec2 ' + CircleDefaults.A_VALUE_TO_INTERPOLATE + ';\\n' +\r\n            'varying vec2 val;\\n' +\r\n            'uniform mat4 ' + CircleDefaults.U_SPRITE_TRANSFORM + ';\\n' +\r\n            'void main() {\\n' +\r\n            '  val = ' + CircleDefaults.A_VALUE_TO_INTERPOLATE + ';\\n' +\r\n            '  gl_Position = ' + CircleDefaults.U_SPRITE_TRANSFORM + ' * ' + CircleDefaults.A_POSITION + ';\\n' +\r\n            '}\\n';\r\n        var fragmentShaderSource =\r\n            'precision highp float;\\n' +\r\n            'uniform vec3 ' + CircleDefaults.U_COLOR + \";\\n\" +\r\n            'varying vec2 val;\\n' +\r\n            'void main() {\\n' +\r\n            '  float R = 0.5;\\n' +\r\n            '  float dist = sqrt(dot(val,val));\\n' +\r\n            '  float alpha = 1.0;\\n' +\r\n            '  if(dist > R){\\n' +\r\n            '    discard;\\n' +\r\n            '  }\\n' +\r\n            '  gl_FragColor = vec4(' + CircleDefaults.U_COLOR + ' * dist, alpha);\\n' +\r\n            '}\\n';\r\n        this.shader.init(webGL, vertexShaderSource, fragmentShaderSource);\r\n\r\n        var verticesTexCoords = new Float32Array([\r\n            -0.5,  0.5, 0.0, 0.0,\r\n            -0.5, -0.5, 0.0, 1.0,\r\n             0.5,  0.5, 1.0, 0.0,\r\n             0.5, -0.5, 1.0, 1.0\r\n        ]);\r\n\r\n        // CREATE THE BUFFER ON THE GPU\r\n        this.vertexTexCoordBuffer = webGL.createBuffer();\r\n\r\n        // BIND THE BUFFER TO BE VERTEX DATA\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\r\n\r\n        // AND SEND THE DATA TO THE BUFFER WE CREATED ON THE GPU\r\n        webGL.bufferData(webGL.ARRAY_BUFFER, verticesTexCoords, webGL.STATIC_DRAW);\r\n\r\n        this.webGLAttributeLocations = {};\r\n        this.webGLUniformLocations = {};\r\n        this.loadAttributeLocations(webGL, [CircleDefaults.A_POSITION, CircleDefaults.A_VALUE_TO_INTERPOLATE]);\r\n        this.loadUniformLocations(webGL, [CircleDefaults.U_COLOR, CircleDefaults.U_SPRITE_TRANSFORM]);\r\n\r\n        this.spriteTransform = new Matrix(4, 4);\r\n        this.spriteTranslate = new Vector3();\r\n        this.spriteRotate = new Vector3();\r\n        this.spriteScale = new Vector3();\r\n    }\r\n\r\n    public renderGradientCircles(  webGL : WebGLRenderingContext, canvasWidth : number, canvasHeight : number, visibleSet : Array<GradientCircle>) : void {\r\n        // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\r\n        let shaderProgramToUse = this.shader.getProgram();\r\n        webGL.useProgram(shaderProgramToUse);\r\n\r\n        // AND THEN RENDER EACH ONE\r\n        for (let circle of visibleSet) {\r\n            this.renderGradientCircle(webGL, canvasWidth, canvasHeight, circle);        \r\n        }\r\n    }\r\n\r\n    private loadAttributeLocations(webGL : WebGLRenderingContext, attributeLocationNames : Array<string>) {\r\n        for (var i = 0; i < attributeLocationNames.length; i++) {\r\n            let locationName : string = attributeLocationNames[i];\r\n            let location : GLuint = webGL.getAttribLocation(this.shader.getProgram(), locationName);\r\n            this.webGLAttributeLocations[locationName] = location;\r\n        }\r\n    }\r\n\r\n    private loadUniformLocations(webGL : WebGLRenderingContext, uniformLocationNames : Array<string>) {\r\n        for (let i : number = 0; i < uniformLocationNames.length; i++) {\r\n            let locationName : string = uniformLocationNames[i];\r\n            let location : WebGLUniformLocation = webGL.getUniformLocation(this.shader.getProgram(), locationName);\r\n            this.webGLUniformLocations[locationName] = location;\r\n        }\r\n    }\r\n\r\n    private renderGradientCircle(   webGL : WebGLRenderingContext, canvasWidth : number, canvasHeight : number, circle: GradientCircle) {\r\n\r\n        // CALCULATE HOW MUCH TO TRANSLATE THE QUAD PER THE CIRCLE POSITION\r\n        let diameter : number = circle.getDiameter();\r\n        let circleXInPixels : number = circle.getPosition().getX() + (diameter/2);\r\n        let circleYInPixels : number = circle.getPosition().getY() + (diameter/2);\r\n        let circleXTranslate : number = (circleXInPixels - (canvasWidth/2))/(canvasWidth/2);\r\n        let circleYTranslate : number = (circleYInPixels - (canvasHeight/2))/(canvasHeight/2);\r\n        this.spriteTranslate.setX(circleXTranslate);\r\n        this.spriteTranslate.setY(-circleYTranslate);\r\n\r\n        // CALCULATE HOW MUCH TO SCALE THE QUAD PER THE CIRCLE SIZE\r\n        let defaultWidth : number = canvasWidth/2;\r\n        let defaultHeight : number = canvasHeight/2;\r\n        let scaleX : number = diameter/defaultWidth;\r\n        let scaleY : number = diameter/defaultHeight;\r\n        this.spriteScale.setX(scaleX);\r\n        this.spriteScale.setY(scaleY);\r\n\r\n        // @todo - COMBINE THIS WITH THE ROTATE AND SCALE VALUES FROM THE SPRITE\r\n        MathUtilities.identity(this.spriteTransform);\r\n        MathUtilities.model(this.spriteTransform, this.spriteTranslate, this.spriteRotate, this.spriteScale);\r\n\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\r\n\r\n        // HOOK UP THE ATTRIBUTES\r\n        let a_PositionLocation : GLuint = this.webGLAttributeLocations[CircleDefaults.A_POSITION];\r\n        webGL.vertexAttribPointer(a_PositionLocation, CircleDefaults.FLOATS_PER_VERTEX, webGL.FLOAT, false, CircleDefaults.TOTAL_BYTES, CircleDefaults.VERTEX_POSITION_OFFSET);\r\n        webGL.enableVertexAttribArray(a_PositionLocation);\r\n        let a_ValueToInterpolate : GLuint = this.webGLAttributeLocations[CircleDefaults.A_VALUE_TO_INTERPOLATE];\r\n        webGL.vertexAttribPointer(a_ValueToInterpolate, CircleDefaults.FLOATS_PER_VERTEX, webGL.FLOAT, false, CircleDefaults.TOTAL_BYTES, CircleDefaults.VERTEX_POSITION_OFFSET);\r\n        webGL.enableVertexAttribArray(a_ValueToInterpolate);\r\n\r\n\r\n        // USE THE UNIFORMS\r\n        let u_SpriteTransformLocation : WebGLUniformLocation = this.webGLUniformLocations[CircleDefaults.U_SPRITE_TRANSFORM];\r\n        webGL.uniformMatrix4fv(u_SpriteTransformLocation, false, this.spriteTransform.getData());\r\n        let u_Color : WebGLUniformLocation = this.webGLUniformLocations[CircleDefaults.U_COLOR];\r\n        webGL.uniform3fv(u_Color, circle.getColor());\r\n        \r\n        // DRAW THE SPRITE AS A TRIANGLE STRIP USING 4 VERTICES, STARTING AT THE START OF THE ARRAY (index 0)\r\n        webGL.drawArrays(webGL.TRIANGLE_STRIP, CircleDefaults.INDEX_OF_FIRST_VERTEX, CircleDefaults.NUM_VERTICES);\r\n        }\r\n\r\n}","/*\n * This serves as the subsystem that manages all game rendering.\n */\nimport {TextRenderer} from './TextRenderer'\nimport {WebGLGameSpriteRenderer} from './WebGLGameSpriteRenderer'\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\nimport {WebGLGameTexture } from './WebGLGameTexture'\nimport {WebGLGameCircleRenderer} from './WebGLGameCircleRenderer'\nimport {GradientCircle} from '../scene/sprite/GradientCircle'\n\nexport class WebGLGameRenderingSystem {\n    private renderingCanvas : HTMLCanvasElement;\n    private webGL : WebGLRenderingContext;\n    private spriteRenderer : WebGLGameSpriteRenderer;\n    private circleRenderer : WebGLGameCircleRenderer;\n    private textRenderer : TextRenderer;\n    private canvasWidth : number;\n    private canvasHeight : number;\n\n    public constructor() {}\n\n    public getTextureConstant(id : number) : number {\n        // WE ONLY HAVE 4 HERE, WE SHOULD HAVE A BETTER WAY OF DOING THIS\n        switch(id) {\n            case 0: return this.webGL.TEXTURE0;\n            case 1: return this.webGL.TEXTURE1;\n            case 2: return this.webGL.TEXTURE3;\n            default: return this.webGL.TEXTURE4;\n        }\n    }\n\n    public getWebGL() : WebGLRenderingContext {\n        return this.webGL;\n    }\n\n    public getSpriteRenderer() : WebGLGameSpriteRenderer {\n        return this.spriteRenderer;\n    }\n\n    public getCircleRenderer() : WebGLGameCircleRenderer {\n        return this.circleRenderer;\n    }\n\n    public getTextRenderer() : TextRenderer {\n        return this.textRenderer;\n    }\n\n    public init(renderingCanvasId : string, textCanvasId : string) : void {\n        // FIRST SETUP webGL\n        this.renderingCanvas = <HTMLCanvasElement>document.getElementById(renderingCanvasId);\n        this.renderingCanvas.width = window.innerWidth;\n        this.renderingCanvas.height = window.innerHeight;\n        this.canvasWidth = this.renderingCanvas.width;\n        this.canvasHeight = this.renderingCanvas.height;\n        this.webGL = this.renderingCanvas.getContext(\"webgl\");\n\n        // IF THE USER'S MACHINE/BROWSER DOESN'T SUPPORT\n        // WebGL THEN THERE'S NO POINT OF GOING ON\n        if (!this.webGL) {\n            // PROVIDE SOME FEEDBACK THAT WebGL WON'T WORK BECAUSE\n            // THE USER'S' GRAPHICS CARD IS FOR THE BIRDS\n            console.error(\"WebGL is not supported by this device\");\n\n            // AND END INITIALIZATION\n            return;\n        }\n\n        // WebGL IS SUPPORTED, SO INIT EVERYTHING THAT USES IT\n\n        // MAKE THE CLEAR COLOR BLACK\n        this.setClearColor(0.0, 0.0, 0.0, 1.0);\n\n        // ENABLE DEPTH TESTING\n        this.webGL.disable(this.webGL.DEPTH_TEST);\n        this.webGL.enable(this.webGL.BLEND);\n        this.webGL.blendFunc(this.webGL.SRC_ALPHA, this.webGL.ONE_MINUS_SRC_ALPHA);\n\n        // TURN ON BACKFACE CULLING\n        this.webGL.enable(this.webGL.CULL_FACE);\n\n        // THIS SPECIFIES THAT WE'RE USING THE ENTIRE CANVAS\n        this.webGL.viewport(0, 0, this.canvasWidth, this.canvasHeight);\n\n        // NOW MAKE THE SHADER FOR DRAWING THIS THING\n        this.spriteRenderer = new WebGLGameSpriteRenderer();\n        this.spriteRenderer.init(this.webGL);\n\n        this.circleRenderer = new WebGLGameCircleRenderer();\n        this.circleRenderer.init(this.webGL);\n        \n        // THIS WILL STORE OUR TEXT\n        this.textRenderer = new TextRenderer(textCanvasId, \"serif\", 18, \"#FFFF00\");\n    }\n\n    public initWebGLTexture(textureToInit : WebGLGameTexture, textureId : number, image : HTMLImageElement, callback : Function) : void {\n        textureToInit.width = image.width;\n        textureToInit.height = image.height;\n\n        // CREATE A WebGL TEXTURE ON THE GPU\n        textureToInit.webGLTexture = this.webGL.createTexture();\n        textureToInit.webGLTextureId = textureId;\n\n        // FLIP THE IMAGE'S y-AXIS\n        //webGL.pixelStorei(webGL.UNPACK_FLIP_Y_WEBGL, 1);\n\n        // ACTIVATE THE WebGL TEXTURE ON THE GPU\n        //let textureNumName : string = \"TEXTURE\" + textureId;\n        let textureNameConstant : number = this.getTextureConstant(textureId);\n        this.webGL.activeTexture(textureNameConstant);\n\n        // BIND THE TEXTURE TO A 2D TYPE\n        this.webGL.bindTexture(this.webGL.TEXTURE_2D, textureToInit.webGLTexture);\n\n        // SPECIFY RENDERING SETTINGS\n        this.webGL.texParameteri(this.webGL.TEXTURE_2D, this.webGL.TEXTURE_MIN_FILTER, this.webGL.LINEAR);\n\n        // SET THE IMAGE FOR THE TEXTURE\n        this.webGL.texImage2D(this.webGL.TEXTURE_2D, 0, this.webGL.RGBA, this.webGL.RGBA, this.webGL.UNSIGNED_BYTE, image);\n\n        // KEEP IT FOR WHEN WE RENDER\n        callback();\n    }\n\n    public setClearColor(r : number, g : number, b : number, a : number) : void {\n        this.webGL.clearColor(r, g, b, a);\n    }\n\n    public render(visibleSprites : Array<AnimatedSprite>, visibleCircles : Array<GradientCircle>) : void {\n        // CLEAR THE CANVAS\n        this.webGL.clear(this.webGL.COLOR_BUFFER_BIT | this.webGL.DEPTH_BUFFER_BIT);\n        \n        // RENDER THE SPRITES ON ONE CANVAS\n        this.spriteRenderer.renderAnimatedSprites(this.webGL, this.canvasWidth, this.canvasHeight, visibleSprites);\n\n        this.circleRenderer.renderGradientCircles(this.webGL, this.canvasWidth, this.canvasHeight, visibleCircles);\n        \n        // THEN THE TEXT ON ANOTHER OVERLAPPING CANVAS\n        this.textRenderer.render();\n    }\n}","/*\n * This is a wrapper class for a WebGLProgram, i.e. a shader for custom rendering\n * using WebGL's programmable pipeline.\n */\nexport class WebGLGameShader {\n    private program : WebGLProgram;\n    private vertexShader : WebGLShader;\n    private fragmentShader : WebGLShader;\n\n    public constructor() {}\n\n    public getProgram() : WebGLProgram {\n        return this.program;\n    }\n\n    public init(webGL : WebGLRenderingContext, vSource : string, fSource : string) : void {\n        this.vertexShader = <WebGLShader>this.createShader(webGL, webGL.VERTEX_SHADER, vSource);\n        this.fragmentShader = <WebGLShader>this.createShader(webGL, webGL.FRAGMENT_SHADER, fSource);\n        this.program = this.createShaderProgram(webGL, this.vertexShader, this.fragmentShader);\n    }\n\n    public createShader(webGL : WebGLRenderingContext, type : number, source : string) : WebGLShader {\n        // MAKE A NEW SHADER OBJECT, LOAD IT'S SOURCE, AND COMPILE IT\n        var shader = webGL.createShader(type);\n        webGL.shaderSource(shader, source);\n        webGL.compileShader(shader);\n\n        // DID IT COMPILE?\n        var success = webGL.getShaderParameter(shader, webGL.COMPILE_STATUS);\n        if (success) {\n            return shader;\n        }\n\n        // DISASTER\n        console.log(webGL.getShaderInfoLog(shader));\n        webGL.deleteShader(shader);\n        return null;\n    }\n\n    public createShaderProgram(webGL : WebGLRenderingContext, vShader : WebGLShader, fShader : WebGLShader) : WebGLProgram {\n        // MAKE THE GLSL SHADER PROGRAM\n        let programToCreate = webGL.createProgram();\n\n        // LINK THE VERT AND FRAG\n        webGL.attachShader(programToCreate, vShader);\n        webGL.attachShader(programToCreate, fShader);\n\n        // NOW WE CAN LINK THE SHADER PROGRAM\n        webGL.linkProgram(programToCreate);\n        let linked : boolean = webGL.getProgramParameter(programToCreate, webGL.LINK_STATUS);\n\n        // IS IT LINKED?\n        if (!linked) {\n            // DISASTER\n            let errorFeedback : string = webGL.getProgramInfoLog(programToCreate);\n            console.log(errorFeedback);\n\n            // DISASTER\n            console.log(webGL.getProgramInfoLog(programToCreate));\n            webGL.deleteProgram(programToCreate);\n        }\n        return programToCreate;\n    }\n}","import {WebGLGameShader} from './WebGLGameShader'\nimport {MathUtilities} from '../math/MathUtilities'\nimport { Matrix } from '../math/Matrix'\nimport { Vector3 } from '../math/Vector3'\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\nimport {WebGLGameTexture} from './WebGLGameTexture'\nimport {HashTable} from '../data/HashTable'\n\nvar SpriteDefaults = {\n    A_POSITION: \"a_Position\",\n    A_TEX_COORD: \"a_TexCoord\",\n    U_SPRITE_TRANSFORM: \"u_SpriteTransform\",\n    U_TEX_COORD_FACTOR: \"u_TexCoordFactor\",\n    U_TEX_COORD_SHIFT: \"u_TexCoordShift\",\n    U_SAMPLER: \"u_Sampler\",\n    NUM_VERTICES: 4,\n    FLOATS_PER_VERTEX: 2,\n    FLOATS_PER_TEXTURE_COORDINATE: 2,\n    TOTAL_BYTES: 16,\n    VERTEX_POSITION_OFFSET: 0,\n    TEXTURE_COORDINATE_OFFSET: 8,\n    INDEX_OF_FIRST_VERTEX: 0\n};\n\nexport class WebGLGameSpriteRenderer {\n    private shader : WebGLGameShader;\n    private vertexTexCoordBuffer : WebGLBuffer;\n\n    // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\n    private spriteTransform : Matrix;\n    private spriteTranslate : Vector3;\n    private spriteRotate : Vector3;\n    private spriteScale : Vector3;    \n\n    private webGLAttributeLocations : HashTable<GLuint>;\n    private webGLUniformLocations : HashTable<WebGLUniformLocation>;\n\n    public constructor() {}\n    \n    public init(webGL : WebGLRenderingContext) : void {\n        this.shader = new WebGLGameShader();\n        var vertexShaderSource =\n            'uniform mat4 ' + SpriteDefaults.U_SPRITE_TRANSFORM + ';\\n' +\n            'uniform vec2 ' + SpriteDefaults.U_TEX_COORD_FACTOR + ';\\n' +\n            'uniform vec2 ' + SpriteDefaults.U_TEX_COORD_SHIFT + ';\\n' +\n            'attribute vec4 ' + SpriteDefaults.A_POSITION + ';\\n' +\n            'attribute vec2 ' + SpriteDefaults.A_TEX_COORD + ';\\n' +\n            'varying vec2 v_TexCoord;\\n' +\n            'void main() {\\n' +\n            '  gl_Position = ' + SpriteDefaults.U_SPRITE_TRANSFORM + ' * ' + SpriteDefaults.A_POSITION + ';\\n' +\n            '  vec2 tempTexCoord = ' + SpriteDefaults.A_TEX_COORD + ' * ' + SpriteDefaults.U_TEX_COORD_FACTOR + ';\\n' +\n            '  v_TexCoord = tempTexCoord + ' + SpriteDefaults.U_TEX_COORD_SHIFT + ';\\n' +\n            '}\\n';\n        var fragmentShaderSource =\n            '#ifdef GL_ES\\n' +\n            'precision mediump float;\\n' +\n            '#endif\\n' +\n            'uniform sampler2D ' + SpriteDefaults.U_SAMPLER + ';\\n' +\n            'varying vec2 v_TexCoord;\\n' +\n            'void main() {\\n' +\n            '  gl_FragColor = texture2D(' + SpriteDefaults.U_SAMPLER + ', v_TexCoord);\\n' +\n            '}\\n';\n        this.shader.init(webGL, vertexShaderSource, fragmentShaderSource);\n\n        // GET THE webGL OBJECT TO USE\n        var verticesTexCoords = new Float32Array([\n            -0.5,  0.5, 0.0, 0.0,\n            -0.5, -0.5, 0.0, 1.0,\n             0.5,  0.5, 1.0, 0.0,\n             0.5, -0.5, 1.0, 1.0\n        ]);\n\n        // CREATE THE BUFFER ON THE GPU\n        this.vertexTexCoordBuffer = webGL.createBuffer();\n\n        // BIND THE BUFFER TO BE VERTEX DATA\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\n\n        // AND SEND THE DATA TO THE BUFFER WE CREATED ON THE GPU\n        webGL.bufferData(webGL.ARRAY_BUFFER, verticesTexCoords, webGL.STATIC_DRAW);\n\n        // SETUP THE SHADER ATTRIBUTES AND UNIFORMS\n        this.webGLAttributeLocations = {};\n        this.webGLUniformLocations = {};\n        this.loadAttributeLocations(webGL, [SpriteDefaults.A_POSITION, SpriteDefaults.A_TEX_COORD]);\n        this.loadUniformLocations(webGL, [SpriteDefaults.U_SPRITE_TRANSFORM, SpriteDefaults.U_SAMPLER, SpriteDefaults.U_TEX_COORD_FACTOR, SpriteDefaults.U_TEX_COORD_SHIFT]);\n\n        // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\n        this.spriteTransform = new Matrix(4, 4);\n        this.spriteTranslate = new Vector3();\n        this.spriteRotate = new Vector3();\n        this.spriteScale = new Vector3();\n    }\n\n    public renderAnimatedSprites(  webGL : WebGLRenderingContext, \n                            canvasWidth : number, \n                            canvasHeight : number, \n                            visibleSet : Array<AnimatedSprite>) : void {\n        // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\n        let shaderProgramToUse = this.shader.getProgram();\n        webGL.useProgram(shaderProgramToUse);\n\n       // AND THEN RENDER EACH ONE\n       for (let sprite of visibleSet) {\n            this.renderAnimatedSprite(webGL, canvasWidth, canvasHeight, sprite);        \n        }\n    }\n\n    private loadAttributeLocations(webGL : WebGLRenderingContext, attributeLocationNames : Array<string>) {\n        for (var i = 0; i < attributeLocationNames.length; i++) {\n            let locationName : string = attributeLocationNames[i];\n            let location : GLuint = webGL.getAttribLocation(this.shader.getProgram(), locationName);\n            this.webGLAttributeLocations[locationName] = location;\n        }\n    }\n\n    private loadUniformLocations(webGL : WebGLRenderingContext, uniformLocationNames : Array<string>) {\n        for (let i : number = 0; i < uniformLocationNames.length; i++) {\n            let locationName : string = uniformLocationNames[i];\n            let location : WebGLUniformLocation = webGL.getUniformLocation(this.shader.getProgram(), locationName);\n            this.webGLUniformLocations[locationName] = location;\n        }\n    }\n\n    private renderAnimatedSprite(   webGL : WebGLRenderingContext, \n                            canvasWidth : number, \n                            canvasHeight : number, \n                            sprite : AnimatedSprite) {\n        let spriteType : AnimatedSpriteType = sprite.getSpriteType();\n        let texture : WebGLGameTexture = spriteType.getSpriteSheetTexture();\n\n        // CALCULATE HOW MUCH TO TRANSLATE THE QUAD PER THE SPRITE POSITION\n        let spriteWidth : number = spriteType.getSpriteWidth();\n        let spriteHeight : number = spriteType.getSpriteHeight();\n        let spriteXInPixels : number = sprite.getPosition().getX() + (spriteWidth/2);\n        let spriteYInPixels : number = sprite.getPosition().getY() + (spriteHeight/2);\n        let spriteXTranslate : number = (spriteXInPixels - (canvasWidth/2))/(canvasWidth/2);\n        let spriteYTranslate : number = (spriteYInPixels - (canvasHeight/2))/(canvasHeight/2);\n        this.spriteTranslate.setX(spriteXTranslate);\n        this.spriteTranslate.setY(-spriteYTranslate);\n\n        // CALCULATE HOW MUCH TO SCALE THE QUAD PER THE SPRITE SIZE\n        let defaultWidth : number = canvasWidth/2;\n        let defaultHeight : number = canvasHeight/2;\n        let scaleX : number = spriteWidth/defaultWidth;\n        let scaleY : number = spriteHeight/defaultHeight;\n        this.spriteScale.setX(scaleX);\n        this.spriteScale.setY(scaleY);\n\n        // @todo - COMBINE THIS WITH THE ROTATE AND SCALE VALUES FROM THE SPRITE\n        MathUtilities.identity(this.spriteTransform);\n        MathUtilities.model(this.spriteTransform, this.spriteTranslate, this.spriteRotate, this.spriteScale);\n        \n        // FIGURE OUT THE TEXTURE COORDINATE FACTOR AND SHIFT\n        let texCoordFactorX : number = spriteWidth/texture.width;\n        let texCoordFactorY : number = spriteHeight/texture.height;\n        let spriteLeft : number = sprite.getLeft();\n        let spriteTop : number = sprite.getTop();\n        let texCoordShiftX : number = spriteLeft/texture.width;\n        let texCoordShiftY : number = spriteTop/texture.height;   \n\n        // USE THE ATTRIBUTES\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\n        webGL.bindTexture(webGL.TEXTURE_2D, texture.webGLTexture);\n\n        // HOOK UP THE ATTRIBUTES\n        let a_PositionLocation : GLuint = this.webGLAttributeLocations[SpriteDefaults.A_POSITION];\n        webGL.vertexAttribPointer(a_PositionLocation, SpriteDefaults.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, SpriteDefaults.TOTAL_BYTES, SpriteDefaults.VERTEX_POSITION_OFFSET);\n        webGL.enableVertexAttribArray(a_PositionLocation);\n        let a_TexCoordLocation : GLuint = this.webGLAttributeLocations[SpriteDefaults.A_TEX_COORD];\n        webGL.vertexAttribPointer(a_TexCoordLocation, SpriteDefaults.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, SpriteDefaults.TOTAL_BYTES, SpriteDefaults.TEXTURE_COORDINATE_OFFSET);\n        webGL.enableVertexAttribArray(a_TexCoordLocation);\n\n        // USE THE UNIFORMS\n        let u_SpriteTransformLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_SPRITE_TRANSFORM];\n        webGL.uniformMatrix4fv(u_SpriteTransformLocation, false, this.spriteTransform.getData());\n        let u_SamplerLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_SAMPLER];\n        webGL.uniform1i(u_SamplerLocation, texture.webGLTextureId);\n        let u_TexCoordFactorLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_TEX_COORD_FACTOR];\n        webGL.uniform2f(u_TexCoordFactorLocation, texCoordFactorX, texCoordFactorY);\n        let u_TexCoordShiftLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_TEX_COORD_SHIFT];\n        webGL.uniform2f(u_TexCoordShiftLocation, texCoordShiftX, texCoordShiftY);\n\n        // DRAW THE SPRITE AS A TRIANGLE STRIP USING 4 VERTICES, STARTING AT THE START OF THE ARRAY (index 0)\n        webGL.drawArrays(webGL.TRIANGLE_STRIP, SpriteDefaults.INDEX_OF_FIRST_VERTEX, SpriteDefaults.NUM_VERTICES);\n    }\n}","export class WebGLGameTexture {\n    public webGLTextureId: number;\n    public webGLTexture: WebGLTexture;\n    public image: HTMLImageElement;\n    public width : number;\n    public height : number;\n}","import {SceneObject} from './SceneObject'\nimport {AnimatedSprite} from './sprite/AnimatedSprite'\nimport {GradientCircle} from './sprite/GradientCircle'\n\nexport class SceneGraph {\n    // AND ALL OF THE ANIMATED SPRITES, WHICH ARE NOT STORED\n    // SORTED OR IN ANY PARTICULAR ORDER. NOTE THAT ANIMATED SPRITES\n    // ARE SCENE OBJECTS\n    private animatedSprites : Array<AnimatedSprite>;\n\n    private gradientCircles : Array<GradientCircle>;\n    private objectToShowInfo : SceneObject;\n    private objMakeLocation : Array<number>;\n\n    // SET OF VISIBLE OBJECTS, NOTE THAT AT THE MOMENT OUR\n    // SCENE GRAPH IS QUITE SIMPLE, SO THIS IS THE SAME AS\n    // OUR LIST OF ANIMATED SPRITES\n    private visibleSet : Array<SceneObject>;\n\n    public constructor() {\n        // DEFAULT CONSTRUCTOR INITIALIZES OUR DATA STRUCTURES\n        this.animatedSprites = new Array();\n        this.gradientCircles = new Array();\n        this.visibleSet = new Array();\n    }\n\n    public getNumSprites() : number {\n        return this.animatedSprites.length;\n    }\n\n    public getNumCircles() : number {\n        return this.gradientCircles.length;\n    }\n\n    public addAnimatedSprite(sprite : AnimatedSprite) : void {\n        this.animatedSprites.push(sprite);\n    }\n\n    public addGradientCircle(circle : GradientCircle) : void {\n        this.gradientCircles.push(circle);\n    }\n\n    public deleteAnimatedSprite(sprite : AnimatedSprite) : void {\n        this.animatedSprites = this.animatedSprites.filter(function(s){ return s != sprite});\n    }\n\n    public deleteGradientCircle(circle : GradientCircle) : void {\n        this.gradientCircles = this.gradientCircles.filter(function(c){return c != circle});\n    }\n\n    public getSpriteAt(testX : number, testY : number) : AnimatedSprite {\n        for (let sprite of this.animatedSprites) {\n            if (sprite.contains(testX, testY))\n                return sprite;\n        }\n        return null;\n    }\n\n    public getCircleAt(testX : number, testY : number) : GradientCircle {\n        for (let circle of this.gradientCircles) {\n            if (circle.contains(testX, testY))\n                return circle;\n        }\n        return null;\n    }\n\n    public getObjectToShowInfo() : SceneObject {\n        return this.objectToShowInfo;\n    }\n\n    public setObjectToShowInfo(obj : SceneObject) : void{\n        this.objectToShowInfo = obj;\n    }\n\n    public getObjMakeLocation() : Array<number> {\n        return this.objMakeLocation;\n    }\n\n    public setObjMakeLocation(coords : Array<number>) : void{\n        this.objMakeLocation = coords;\n    }\n\n    /**\n     * update\n     * \n     * Called once per frame, this function updates the state of all the objects\n     * in the scene.\n     * \n     * @param delta The time that has passed since the last time this update\n     * funcation was called.\n     */\n    public update(delta : number) : void {\n        for (let sprite of this.animatedSprites) {\n            sprite.update(delta);\n        }\n    }\n\n    public scope() : Array<SceneObject> {\n        // CLEAR OUT THE OLD\n        this.visibleSet = [];\n\n        // PUT ALL THE SCENE OBJECTS INTO THE VISIBLE SET\n        for (let sprite of this.animatedSprites) {\n            this.visibleSet.push(sprite);\n        }\n\n        for (let circle of this.gradientCircles) {\n            this.visibleSet.push(circle);\n        }\n\n        return this.visibleSet;\n    }\n\n    public getAnimatedSprites() : Array<AnimatedSprite>{\n        return this.animatedSprites;\n    }\n\n    public getGradientCircles() : Array<GradientCircle>{\n        return this.gradientCircles;\n    }\n}","import {Vector3} from '../math/Vector3'\n\n/**\n * SceneObject\n * \n * A SceneObject is something that can be placed into the scene graph. It has\n * a position, rotation, and scale in the game world. Note that its position\n * is typically its centered location, so if we're talking about a 2d box, \n * it would be the center of that box.\n */\nexport abstract class SceneObject {\n    private position : Vector3;\n    private rotation : Vector3;\n    private scale : Vector3;\n\n    public constructor() {\n        this.position = new Vector3();\n        this.rotation = new Vector3();\n        this.scale = new Vector3();\n\n        // CLEAR ALL VALUES\n        this.position.set(0.0, 0.0, 0.0, 1.0);\n        this.rotation.set(0.0, 0.0, 0.0, 1.0);\n        this.scale.set(1.0, 1.0, 1.0, 1.0);\n    }\n\n    public getPosition() : Vector3 {\n        return this.position;\n    }    \n\n    public getRotation() : Vector3 {\n        return this.rotation;\n    }\n\n    public getScale() : Vector3 {\n        return this.scale;\n    }\n\n    public abstract contains(testX : number, testY : number) : boolean;\n}","import {SceneObject} from '../SceneObject'\nimport {AnimatedSpriteType} from './AnimatedSpriteType'\n\nexport class AnimatedSprite extends SceneObject {\n    private spriteType : AnimatedSpriteType;\n    private state : string;\n    private animationFrameIndex : number;\n    private frameCounter : number;\n    \n    public constructor(initSpriteType : AnimatedSpriteType, initState : string) {\n        super();\n        this.spriteType = initSpriteType;\n        \n        // START RESET\n        this.state = initState;\n        this.animationFrameIndex = 0;\n        this.frameCounter = 0;\n    }\n\n    public getAnimationFrameIndex() : number {\n        return this.animationFrameIndex;\n    }\n\n    public getFrameCounter() : number {\n        return this.frameCounter;\n    }\n\n    public getSpriteType() : AnimatedSpriteType {\n        return this.spriteType;\n    }\n\n    public getState() : string {\n        return this.state;\n    }\n    \n    public setState(initState : string) : void {\n        this.state = initState;\n        this.animationFrameIndex = 0;\n        this.frameCounter = 0;\n    }\n    \n    public update(delta : number) : void {\n        this.frameCounter++;\n        \n        // HAVE WE GONE PAST THE LAST FRAME IN THE ANIMATION?\n        var currentAnimation = this.spriteType.getAnimation(this.state);\n        var currentFrame = currentAnimation[this.animationFrameIndex];\n        if (this.frameCounter > (currentFrame.duration)) {\n            this.animationFrameIndex++;\n            if (this.animationFrameIndex >= currentAnimation.length) {\n                this.animationFrameIndex = 0;\n            }\n            this.frameCounter = 0;\n        }\n    }\n\n    public contains(pointX : number, pointY : number) : boolean {\n        let spriteWidth = this.getSpriteType().getSpriteWidth();\n        let spriteHeight = this.getSpriteType().getSpriteHeight();\n        let spriteLeft = this.getPosition().getX();\n        let spriteRight = this.getPosition().getX() + spriteWidth;\n        let spriteTop = this.getPosition().getY();\n        let spriteBottom = this.getPosition().getY() + spriteHeight;\n        if (    (pointX < spriteLeft)\n            ||  (spriteRight < pointX)\n            ||  (pointY < spriteTop)\n            ||  (spriteBottom < pointY)) {\n                return false;\n        }\n        else {\n            return true;\n        }\n    }\n    \n    /**RENAME THIS METHOD SO IT DENOTES PIXEL LOCATION IN TEXTURE */\n    public getLeft() : number {\n        return this.spriteType.getLeft(this.state, this.animationFrameIndex);\n    }\n    \n    public getTop() : number {\n        return this.spriteType.getTop(this.state, this.animationFrameIndex);\n    }\n\n    public toString() : string {\n        let summary : string =  \"{ position: (\"\n                            +   this.getPosition().getX() + \", \" + this.getPosition().getY() + \") \"\n                            +   \"(state: \" + this.getState() + \") \"\n                            +   \"(animationFrameIndex: \" + this.getAnimationFrameIndex() + \") \"\n                            +   \"(frameCounter: \" + this.getFrameCounter() + \") }\";\n        return summary;\n    }\n}","import {WebGLGameTexture} from '../../rendering/WebGLGameTexture'\nimport {HashTable} from '../../data/HashTable'\n\nexport class AnimationFrame {\n    public left : number;\n    public top : number;\n    public duration : number;\n\n    constructor(initLeft : number, initTop : number, initDuration : number) {\n        this.left = initLeft;\n        this.top = initTop;\n        this.duration = initDuration;\n    }\n}\n\nexport class AnimatedSpriteType {\n    private spriteSheetTexture : WebGLGameTexture;\n    private animations : HashTable<Array<AnimationFrame>>;\n    private spriteWidth : number;\n    private spriteHeight : number;\n\n    public constructor(initSpriteSheetTexture : WebGLGameTexture, \n                initSpriteWidth : number, initSpriteHeight : number) {\n        this.spriteSheetTexture = initSpriteSheetTexture;\n        this.animations = {};\n        this.spriteWidth = initSpriteWidth;\n        this.spriteHeight = initSpriteHeight;\n    }\n\n    public addAnimation(state : string) : void {\n        this.animations[state] = new Array<AnimationFrame>();\n    }\n\n    public addAnimationFrame(state : string, index : number, frameDuration : number) : void {\n        var columns = this.spriteSheetTexture.width/this.spriteWidth;\n        var rows = this.spriteSheetTexture.height/this.spriteHeight;\n        var col = index % columns;\n        var row = Math.floor(index /  columns);\n        var left = col * this.spriteWidth;\n        var top = row * this.spriteHeight;\n        this.animations[state].push(new AnimationFrame(left, top, frameDuration));\n    }\n\n    public getSpriteWidth() : number {\n        return this.spriteWidth;\n    }\n\n    public getSpriteHeight() : number {\n        return this.spriteHeight;\n    }\n\n    public getSpriteSheetTexture() : WebGLGameTexture {\n        return this.spriteSheetTexture;\n    }\n\n    public getAnimation(state : string) : Array<AnimationFrame> {\n        return this.animations[state];\n    }\n\n    public getLeft(state : string, frameIndex : number) : number {\n        let animationFrame : AnimationFrame = this.animations[state][frameIndex];\n        return animationFrame.left;\n    }\n\n    public getTop(state : string, frameIndex : number) : number {\n        let animationFrame : AnimationFrame = this.animations[state][frameIndex];\n        return animationFrame.top;\n    }\n}","import {SceneObject} from '../SceneObject'\r\n\r\nexport class GradientCircle extends SceneObject {\r\n    private diameter : number = 256;\r\n    private static colors : Array<Array<number>> = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 1.0, 0.0], [1.0, 0.0, 1.0], [0.0, 1.0, 1.0]];\r\n    private color : Array<number>;\r\n    public constructor(){\r\n        super();\r\n        this.color = GradientCircle.colors[Math.floor(Math.random() * GradientCircle.colors.length)];\r\n    }\r\n\r\n    public contains(pointX : number, pointY : number) : boolean {\r\n        let centerX = this.getPosition().getX() + this.getDiameter()/2;\r\n        let centerY = this.getPosition().getY() + this.getDiameter()/2;\r\n        if(Math.sqrt((Math.pow(pointX - centerX,2)) + (Math.pow(pointY - centerY,2)) ) > this.getDiameter()/2){\r\n            return false;\r\n\r\n        }else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public getDiameter() : number {\r\n        return this.diameter;\r\n    }\r\n\r\n    public getColor() : Array<number> {\r\n        return this.color;\r\n    }\r\n\r\n    public toString() : string {\r\n\r\n        let summary : string =  \"{ position: (\"\r\n                            +   this.getPosition().getX() + \", \" + this.getPosition().getY() + \"),  \"\r\n                            +   \"color: rgb(\" + this.color[0] + \", \" + this.color[1] + \", \" + this.color[2] + \") }\";\r\n        return summary;\r\n    }\r\n}","/*\n * This provides responses to UI input.\n */\nimport {SceneGraph} from \"../scene/SceneGraph\"\nimport { SceneObject } from \"../scene/SceneObject\";\nimport { AnimatedSprite } from \"../scene/sprite/AnimatedSprite\";\nimport { GradientCircle } from \"../scene/sprite/GradientCircle\";\n\nexport class UIController {\n    private objectToDrag : SceneObject;\n    private scene : SceneGraph;\n    private dragOffsetX : number;\n    private dragOffsetY : number;\n\n    public constructor() {}\n\n    public init(canvasId : string, initScene : SceneGraph) : void {\n        this.objectToDrag = null;\n        this.scene = initScene;\n        this.dragOffsetX = -1;\n        this.dragOffsetY = -1;\n\n        let canvas : HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(canvasId);\n        canvas.addEventListener(\"mousedown\", this.mouseDownHandler);\n        canvas.addEventListener(\"mousemove\", this.mouseMoveHandler);\n        canvas.addEventListener(\"mouseup\", this.mouseUpHandler);\n        canvas.addEventListener(\"dblclick\", this.mouseDClickHandler);\n        canvas.addEventListener(\"click\", this.mouseClickHandler);\n    }\n\n    public mouseDClickHandler = (event: MouseEvent) : void => {\n        let mousePressX : number = event.clientX;\n        let mousePressY : number = event.clientY;\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\n        let circle : GradientCircle = this.scene.getCircleAt(mousePressX, mousePressY);\n        if(sprite != null){\n            console.log(`I'm deleting the sprite ${sprite}`);\n            this.scene.deleteAnimatedSprite(sprite);\n        }\n        if(circle != null){\n            console.log(`I'm deleting the circle ${circle}`);\n            this.scene.deleteGradientCircle(circle);\n        }\n        this.scene.setObjectToShowInfo(null);\n    }\n\n    public mouseClickHandler = (event: MouseEvent) : void => {\n        let mousePressX : number = event.clientX;\n        let mousePressY : number = event.clientY;\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\n        let circle : GradientCircle = this.scene.getCircleAt(mousePressX, mousePressY);\n        if(sprite == null && circle == null){\n            console.log(`I'm making an object at ${mousePressX}, ${mousePressY}`);\n            this.scene.setObjMakeLocation([mousePressX, mousePressY]);\n        }else{\n            this.scene.setObjMakeLocation(null);\n        }\n    }\n\n    public mouseDownHandler = (event : MouseEvent) : void => {\n        let mousePressX : number = event.clientX;\n        let mousePressY : number = event.clientY;\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\n        let circle : GradientCircle = this.scene.getCircleAt(mousePressX, mousePressY);\n        console.log(\"mousePressX: \" + mousePressX);\n        console.log(\"mousePressY: \" + mousePressY);\n        if (sprite != null) {\n            // START DRAGGING IT\n            console.log(\"sprite: \" + sprite);\n            this.objectToDrag = sprite;\n            this.dragOffsetX = sprite.getPosition().getX() - mousePressX;\n            this.dragOffsetY = sprite.getPosition().getY() - mousePressY;\n        }\n        if (circle != null) {\n            // START DRAGGING IT\n            console.log(\"circle: \" + circle);\n            this.objectToDrag = circle;\n            this.dragOffsetX = circle.getPosition().getX() - mousePressX;\n            this.dragOffsetY = circle.getPosition().getY() - mousePressY;\n        }\n    }\n    \n    public mouseMoveHandler = (event : MouseEvent) : void => {\n        if (this.objectToDrag != null) {\n            this.objectToDrag.getPosition().set(event.clientX + this.dragOffsetX, \n                                                event.clientY + this.dragOffsetY, \n                                                this.objectToDrag.getPosition().getZ(), \n                                                this.objectToDrag.getPosition().getW());\n        }else{\n            let mouseX : number = event.clientX;\n            let mouseY : number = event.clientY;\n            let sprite : AnimatedSprite = this.scene.getSpriteAt(mouseX, mouseY);\n            let circle : GradientCircle = this.scene.getCircleAt(mouseX, mouseY);\n            if(sprite != null){\n                this.scene.setObjectToShowInfo(sprite);\n            }else if(circle != null){\n                this.scene.setObjectToShowInfo(circle);\n            }else{\n                this.scene.setObjectToShowInfo(null);\n            }\n        }\n    }\n\n    public mouseUpHandler = (event : MouseEvent) : void => {\n        this.objectToDrag = null;\n    }\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}